# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

### Playbook Documentation ###
#
# #### playbooks/configure_vlans.yml
#
# NOTE: For internal Samsung / DSS use! Unsupported!
#
# Execute this playbook to automatically configure VLANs in Mellanox / Onyx environment.
#
# Hosts that are configured with this playbook do not need to have "tcp_ip_list" and "rocev2_ip_list" lists defined in inventory.
# If these vars are not defined, Ansible will attempt to automatically discover IP / VLAN configuration, as configured by this playbook.
#
# Environment MUST have Mellanox Onyx switch configured in inventory.
# Onyx Switch(es) must be included under the [onyx] group in your inventory file.
# Switch credentials must be provided using "ansible_user" and "ansible_ssh_pass" vars for each Onyx host or the entire [onyx] group.
# Key-based authentication is not possible with Onyx.
#
# It is critical to review the "rocev2_vlans" and "tcp_vlans" vars under "group_vars/all.yml" to auto-configure VLANs on Onyx.
# To make changes to the default values, uncomment these vars and make changes to "group_vars/all.yml" or add them to your inventory file.
# There must be an even number of physical interface ports available, with each pair of ports corresponding to one TCP and one RoCEv2 VLAN/IP.
# IPV4 last octet / IPV6 last hextet are automatically derived based on the presence of a digit appended to each hostname in your inventory.
# If a unique number cannot be automatically derived from each hostname in your inventory, a number will automatically be assigned to each host
# in your inventory, starting with "1".
# You can specify a static last octet to each host by assigning the variable, "last_octet" for each host in your inventory file.
# Additionally, you can offset the automatically derived last octet for a host, or a group, by assigning a "last_octet_offset" var for each host or group.
# For example, given two hosts in your inventory: "server_01" and "client_01"
# You can assign "last_octet_offset=100" to "client_01", which will result in "client_01" having a derived last octet of "101"
#
# VLAN IDs for all Onyx switches, clients, servers, targets, and hosts must be assigned in your inventory file using "tcp_vlan_id_list" and
# "rocev2_vlan_id_list" vars.
# The VLAN IDs provided in these list must correspond to the VLAN IDs provided in "rocev2_vlans" and "tcp_vlans" lists, as mentioned above.
# If using multiple Onyx switches, it is thus possible to spread your VLANs across multiple switches.
# Note that if a host and switch both are tagged with a VLAN ID, it is expected that there is a physical link between this switch and host.
# If no link is detected, the playbook fail on this assertion.
#
# Note that it is possible to assign multiple VLANs to a single physical link using the "num_vlans_per_port" var as a host / group var.
# For example, a host with "num_vlans_per_port=2" and 2 physical ports will allow the use of 4 VLANs (2 TCP and 2 RoCEv2)


- name: Validate ansible versions and dependencies
  hosts: localhost
  roles:
    - validate_ansible

- name: Configure LLDPD
  hosts:
    - servers
    - targets
    - hosts
    - clients
  roles:
    - configure_lldpd

- name: Get Onyx LLDP tables
  hosts: onyx
  connection: network_cli
  gather_facts: false
  become: true
  become_method: enable
  vars:
    ansible_network_os: onyx
  roles:
    - get_onyx_lldp

- name: Configure host VLANs
  hosts:
    - servers
    - targets
    - hosts
    - clients
  roles:
    - configure_host_vlans
    - configure_dcqcn

- name: Remove packet pacing
  hosts:
    - servers
    - targets
  gather_facts: false
  roles:
    - remove_packet_pacing

- name: Configure Onyx VLANs
  hosts: onyx
  connection: network_cli
  gather_facts: false
  become: true
  become_method: enable
  vars:
    ansible_network_os: onyx
  roles:
    - configure_onyx_vlans
