# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Assert operation is valid
  assert:
    that: operation in ['PUT', 'GET', 'DEL']
  run_once: true

- name: Set operation_num var
  set_fact:
    operation_num: >-
      {%- if operation == 'PUT' -%}
        {{ s3_bench_put }}
      {%- elif operation == 'GET' -%}
        {{ s3_bench_get }}
      {%- elif operation == 'DEL' -%}
        {{ s3_bench_del }}
      {%- endif -%}
  run_once: true

- name: "Execute s3-benchmark {{ operation }}"
  command: "{{ s3_bench_command }}"
  loop: "{{ assigned_endpoints }}"
  loop_control:
    loop_var: endpoint
    label: "{{ s3_bench_command }}"
  vars:
    cluster_id: "{{ endpoint.id }}"
    numa: "{{ adjacent_numa_list[endpoint.vlan_index].numa }}"
    adjacent_numa: "{{ adjacent_numa_list[endpoint.vlan_index].adjacent_numa }}"
    s3_bench_command: >-
      {% if num_numa | int > 1 -%}
      numactl -N {{ numa }} -m {{ adjacent_numa }}
      {% endif -%}
      {{ minio_dir }}/s3-benchmark
      -a {{ minio_access_key }}
      -s {{ minio_secret_key }}
      -b {{ s3_benchmark_bucket_prefix }}{{ cluster_id }}
      -u http://{{ endpoint.endpoint }}:{{ minio_port }}
      -t {{ s3_benchmark_num_threads }}
      -z {{ s3_benchmark_object_size }}
      -{% if operation != 'GET' %}n{% else %}c{% endif %}
      {% if ansible_virtualization_role == 'guest' -%}
        {{ s3_benchmark_num_objects_vm }}
      {% else -%}
        {{ s3_benchmark_num_objects }}
      {%- endif %}
      -o {{ operation_num }}
      -p vlan_index-{{ endpoint.vlan_index }}/{{ inventory_hostname }}/
      {% if operation == 'GET' %}-d {{ s3_benchmark_duration }}{% endif %}
  register: s3_benchmark_async
  async: "{{ s3_benchmark_async_timeout }}"
  poll: 0

- name: "Check async s3-benchmark {{ operation }} command"
  async_status:
    jid: "{{ async_task.ansible_job_id }}"
  register: async_results
  until: async_results.finished
  retries: "{{ (s3_benchmark_async_timeout / s3_benchmark_async_retry_delay) | int }}"
  delay: "{{ s3_benchmark_async_retry_delay }}"
  loop: "{{ s3_benchmark_async.results }}"
  loop_control:
    loop_var: async_task
    label: "{{ async_task.endpoint.endpoint }}"

- name: "Assert async s3-benchmark {{ operation }} completion"
  assert:
    that: async_result.finished != 0
    fail_msg: "nkv_test_cli did not complete in time"
    quiet: true
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.cmd | join(' ') }}"

- name: "Assert s3-benchmark {{ operation }} results valid"
  assert:
    that: async_result.stdout is regex(objects_re)
    fail_msg: "Did not get valid s3-benchmark result"
    quiet: true
  vars:
    objects_re: 'objects = ([\d]+),'
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.cmd | join(' ') }}"
  when: operation != 'DEL'

- name: Set test_seconds var
  set_fact:
    test_seconds: >-
      {%- set elapsed_time = {'start': '', 'end': ''} -%}
      {%- for client in groups['clients'] -%}
        {%- if hostvars[client].async_results is defined -%}
          {%- for result in hostvars[client].async_results.results -%}
            {%- set start_time = result.start.split('.')[0] -%}
            {%- set end_time = result.end.split('.')[0] -%}
            {%- if elapsed_time.start == '' or start_time | to_datetime < elapsed_time.start | to_datetime -%}
              {%- if elapsed_time.update({ 'start': start_time }) -%}{%- endif -%}
            {%- endif -%}
            {%- if elapsed_time.end == '' or end_time | to_datetime > elapsed_time.end | to_datetime -%}
              {%- if elapsed_time.update({ 'end': end_time }) -%}{%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endfor -%}
      {{ (elapsed_time.end | to_datetime - elapsed_time.start | to_datetime).total_seconds() }}
  run_once: true
  when: operation != 'DEL'

- name: set s3_speed var
  set_fact:
    s3_speed: >-
      {%- set total_objects = {'value': 0} -%}
      {%- set objects_re = 'objects = ([\d]+),' -%}
      {%- for client in groups['clients'] -%}
        {%- if hostvars[client].async_results is defined -%}
          {%- set results_list = hostvars[client].async_results.results | map(attribute='stdout') | list -%}
          {%- for result in results_list -%}
            {%- if result is regex(objects_re) -%}
              {%- set objects_transfered = result | regex_search(objects_re, '\\1') | first -%}
              {%- if total_objects.update({ 'value': total_objects.value | int + objects_transfered | int }) -%}{%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endfor -%}
      {%- set object_size = (s3_benchmark_object_size ~ 'B') | human_to_bytes -%}
      {%- set total_test_bytes = total_objects.value * object_size -%}
      {%- set s3_speed = total_test_bytes | int / test_seconds | int -%}
      {{ s3_speed | human_readable }}/sec
  run_once: true
  when: operation != 'DEL'
