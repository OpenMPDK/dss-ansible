#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Set target/host group vars
  set_fact:
    target_hostnames: "{{ (groups['servers'] | d([]) + groups['targets'] | d([])) | unique }}"
    host_hostnames: "{{ (groups['servers'] | d([]) + groups['hosts'] | d([])) | unique }}"

- name: Stat DSS Minio path
  stat:
    path: "{{ minio_dir }}"
  register: dss_minio_path
  when: inventory_hostname in host_hostnames

- name: Assert DSS Minio path exists
  assert:
    that: dss_minio_path.stat.exists
    fail_msg: DSS Minio is not installed. Execute 'deploy_dss_software.yml' playbook first.
  when: inventory_hostname in host_hostnames

- name: Get TCP IP lists and NUMA
  include_role:
    name: get_tcp_numa
  when: >
    inventory_hostname in host_hostnames or
    inventory_hostname in groups['clients']

- name: Get clusters
  include_role:
    name: get_clusters
  when: >-
    inventory_hostname in host_hostnames or
    inventory_hostname in target_hostnames

- name: Set minio_endpoints var
  set_fact:
    minio_endpoints: >-
      [
        {% for cluster in clusters %}
          {% set cluster_loop = loop %}
          {% for endpoint in cluster.endpoints %}
            {% set endpoint_loop = loop %}
            {% set index_scale = { 'value': 0 } %}
            {% if s3_benchmark_max_instances_per_client > 0 %}
              {% if index_scale.update({ 'value': (endpoint.vlan_index / s3_benchmark_max_instances_per_client) | round(0,'floor') | int }) %}{% endif %}
            {% endif %}
            {
              'endpoint': '{{ endpoint.ipv4 }}',
              'id': '{{ cluster.id }}',
              'vlan_index': {{ endpoint.vlan_index }}
            }{% if not cluster_loop.last or not endpoint_loop.last %},{% endif %}
          {% endfor %}
        {% endfor %}
      ]
  run_once: true

- name: Set all_assigned_endpoints var
  set_fact:
    all_assigned_endpoints: >-
      {%- set assigned_endpoints = [] -%}
      {%- for minio_endpoint in minio_endpoints | shuffle -%}
        {%- set assigned = {'value': false} -%}
        {%- for client in groups['clients'] if not assigned.value -%}
          {%- for interface in hostvars[client].adjacent_numa_list if not assigned.value -%}
            {%- if (s3_benchmark_max_instances_per_client == 0 and num_assigned[client] < hostvars[client].adjacent_numa_list | length) or
              (num_assigned[client] < s3_benchmark_max_instances_per_client) -%}
              {%- if interface.vlan_index == minio_endpoint.vlan_index -%}
                {%- if interface.numa not in assigned_numas[client] -%}
                  {%- if assigned_endpoints.append(
                    {
                      'endpoint': minio_endpoint.endpoint,
                      'vlan_index': minio_endpoint.vlan_index,
                      'id': minio_endpoint.id,
                      'client': client,
                      'client_numa': interface.numa,
                      'client_adjacent_numa': interface.adjacent_numa
                    }
                  ) -%}{%- endif -%}
                  {%- if num_assigned.update({ client: num_assigned[client] + 1 }) -%}{%- endif -%}
                  {%- if assigned.update({ 'value': true }) -%}{%- endif -%}
                  {%- if s3_benchmark_strict_numa -%}
                    {%- if assigned_numas.update({ client: assigned_numas[client] + [interface.numa] }) -%}{%- endif -%}
                  {%- endif -%}
                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}
      {%- set junk_assign = num_assigned -%}
      {%- set junk_numa = assigned_numas -%}
      {{ assigned_endpoints }}
  vars:
    num_assigned: >-
      {
        {% for client in groups['clients'] %}
            '{{ client }}': 0{% if not loop.last %},{% endif %}
        {% endfor %}
      }
    assigned_numas: >-
      {
        {% for client in groups['clients'] %}
            '{{ client }}': []{% if not loop.last %},{% endif %}
        {% endfor %}
      }
  run_once: true

- name: Set assigned_endpoints var
  set_fact:
    assigned_endpoints: "{{ all_assigned_endpoints | selectattr('client', 'equalto', inventory_hostname) | list }}"
  when: inventory_hostname in groups['clients']

- name: Set num_s3_endpoints var
  set_fact:
    num_s3_endpoints: "{{ num_s3_endpoints | d(0) | int + (hostvars[client].assigned_endpoints | length) }}"
  loop: "{{ groups['clients'] }}"
  loop_control:
    loop_var: client
  run_once: true

- name: s3-benchmark PUT
  include_tasks: s3_benchmark.yml
  vars:
    operation: PUT
  when: inventory_hostname in groups['clients']

- name: Start Compaction
  include_role:
    name: start_compaction
  when:
    - inventory_hostname in target_hostnames
    - dss_target_mode is search('kv_block')

- name: Set s3_put_speed var
  set_fact:
    s3_put_speed: "{{ s3_speed }}"
  run_once: true

- name: s3-benchmark GET
  include_tasks: s3_benchmark.yml
  vars:
    operation: GET
  when: inventory_hostname in groups['clients']

- name: Set s3_get_speed var
  set_fact:
    s3_get_speed: "{{ s3_speed }}"
  run_once: true

- name: s3-benchmark DEL
  include_tasks: s3_benchmark.yml
  vars:
    operation: DEL
  when: inventory_hostname in groups['clients']

- name: Start Compaction
  include_role:
    name: start_compaction
  when:
    - inventory_hostname in target_hostnames
    - dss_target_mode is search('kv_block')

- name: Print combined s3_benchmark PUT and GET throughput
  debug:
    msg: |
      Num. MinIO Hosts: {{ host_hostnames | length }}
      Num. MinIO Endpoints: {{ minio_endpoints | length }}
      Num. Clients: {{ groups['clients'] | length }}
      Max. s3-benchmark instances per client: {{ s3_benchmark_max_instances_per_client }}
      Total s3-benchmark instances: {{ num_s3_endpoints }}
      ------------------------------------------------------------
      PUT: {{ s3_put_speed }}
      GET: {{ s3_get_speed }}
  run_once: true
