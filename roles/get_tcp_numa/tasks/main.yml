# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Assert tcp_alias_list is defined
  assert:
    that: tcp_alias_list is defined
    msg: |
      tcp_alias_list is not defined.
      get_tcp_vlan_ip_list role must be included.

- name: Get num. NUMA nodes
  shell: |
    lscpu | grep -oP 'NUMA node\(s\): +\K.+'
  changed_when: false
  register: lscpu_num_numa

- name: Set num_numa var
  set_fact:
    num_numa: "{{ lscpu_num_numa.stdout | int }}"

- name: Get numa / socket allocation
  shell: "lscpu --parse=NODE,SOCKET | sort -u | grep -v '#'"
  register: lscpu_numa_socket
  changed_when: false

- name: Set numa_socket var
  set_fact:
    numa_socket: "{{ numa_socket | default([]) +
                    [{
                      'numa': item | regex_search(numa_socket_re, '\\1') | first | int,
                      'socket': item | regex_search(numa_socket_re, '\\2') | first | int
                    }]
                  }}"
  loop: "{{ lscpu_numa_socket.stdout_lines }}"
  vars:
    numa_socket_re: '([^,]+),(.+)'

- name: Set can_interleave var
  set_fact:
    can_interleave: true
  when: (num_numa | int) / (tcp_alias_list | length) >= 2

- name: Assert more than one NUMA node
  assert:
    that: num_numa | int > 1
    msg: |
      NUMA Nodes: {{ num_numa }}
      Processor count: {{ ansible_processor_count }}
      For optimal performance, configure NUMA nodes per socket.
  when:
    - ansible_processor_count > 1
    - ansible_virtualization_role == 'host'
  ignore_errors: true

- name: Set adjacent_numa_list var
  set_fact:
    adjacent_numa_list: >-
      {{ adjacent_numa_list | default([]) }} +
      [
        {
          'interface': '{{ interface }}',
          'tcp_alias': '{{ tcp_alias }}',
          'numa': {{ numa }},
          'vlan_index': {{ ansible_loop.index0 }},
          'adjacent_numa':
          {% if ((numa | int - 1) not in (tcp_alias_list | map(attribute='numa') | list)) and
            ((numa | int - 1) >= (min_socket_numa | int)) and
            (adjacent_numa_list is not defined or (numa | int - 1) not in (adjacent_numa_list | map(attribute='adjacent_numa') | list)) %}
              {{ numa | int - 1 }}
          {% elif ((numa | int + 1) not in (tcp_alias_list | map(attribute='numa') | list)) and
            ((numa | int + 1) <= (max_socket_numa | int)) and
            (adjacent_numa_list is not defined or (numa | int + 1) not in (adjacent_numa_list | map(attribute='adjacent_numa') | list)) %}
              {{ numa | int + 1 }}
          {% else %}
            {{ numa | int }}
          {% endif %}
        }
      ]
  loop: "{{ tcp_alias_list }}"
  loop_control:
    extended: true
    loop_var: tcp_adapter
    label: "{{ tcp_alias }}"
  vars:
    interface: "{{ tcp_adapter.interface }}"
    numa: "{{ tcp_adapter.numa }}"
    tcp_alias: "{{ tcp_adapter.alias }}"
    socket_num: "{{ numa_socket | selectattr('numa', 'equalto', numa | int) | map(attribute='socket') | list | first }}"
    min_socket_numa: "{{ numa_socket | selectattr('socket', 'equalto', socket_num | int) | map(attribute='numa') | list | first }}"
    max_socket_numa: "{{ numa_socket | selectattr('socket', 'equalto', socket_num | int) | map(attribute='numa') | list | last }}"

- name: Assert all adapters are on separate NUMA nodes
  assert:
    that: num_adapters == num_adapters_with_unique_numa
    msg: |
      One or more adapters on the same NUMA node:
      {% for interface in adjacent_numa_list %}
        - interface: {{ interface.interface }}
          NUMA: {{ interface.numa }}
          adjacent NUMA: {{ interface.adjacent_numa }}
      {% endfor %}
  vars:
    num_adapters_with_unique_numa: "{{ adjacent_numa_list | map(attribute='numa') | list | unique | length }}"
    num_adapters: "{{ adjacent_numa_list | length }}"
  ignore_errors: true

- name: Assert optimal interleaved NUMA configuration
  assert:
    that: numa != adjacent_numa
    msg: Network adapters are not in a optimal NUMA configuration.
  loop: "{{ adjacent_numa_list }}"
  loop_control:
    label: "{{ item.tcp_alias }}"
  vars:
    numa: "{{ item.numa }}"
    adjacent_numa: "{{ item.adjacent_numa }}"
  when: can_interleave is defined
  ignore_errors: true

- name: Assert NUMA belongs to only one socket
  assert:
    that: numa_socket | selectattr('numa', 'equalto', numa) | map(attribute='socket') | list | length == 1
    msg: NUMA belongs to more than one socket. NUMA configuration is not optimal.
  loop: "{{ tcp_alias_list | map(attribute='numa') | list }}"
  loop_control:
    loop_var: numa
  when: num_numa | int > 1
  ignore_errors: true
