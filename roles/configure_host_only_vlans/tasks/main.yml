# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Assert valid rocev2_vlan_interfaces var
  assert:
    that:
      - rocev2_vlan_interfaces is defined
      - rocev2_vlan_interfaces is not mapping
      - rocev2_vlan_interfaces is iterable
      - rocev2_vlan_interfaces is not string
    msg: Cannot configure vlans. Check value of `rocev2_vlan_interfaces` var.

- name: Assert RoCEv2 VLAN Interfaces are present on host
  assert:
    that: matching_interfaces | length > 0
    msg: "{{ item.interface }} is not a valid interface on this host. Please check `rocev2_vlan_interfaces` var"
  loop: "{{ rocev2_vlan_interfaces }}"
  vars:
    all_interfaces: "{{ ansible_facts | dict2items | selectattr('value.device', 'defined') | map(attribute='value') | list }}"
    matching_interfaces: "{{ all_interfaces | selectattr('device', 'equalto', item.interface ) | list }}"

- name: Assert RoCEv2 VLAN IP addresses are defined
  assert:
    that: rocev2_ip_list | length >= ansible_loop.index
    msg: "{{ item }} (index {{ ansible_loop.index0 }}) does not have a corresponding IP address defined. Check rocev2_ip_list var."
  loop: "{{ rocev2_vlan_interfaces }}"
  loop_control:
    label: "{{ ansible_loop.index }}"
    extended: true

- name: Find ifcfg files
  find:
    paths: /etc/sysconfig/network-scripts/
    patterns: "ifcfg-*"
  register: ifcfg_files

- name: Remove ifcfg files for adapters that do not exist
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ifcfg_files.files }}"
  loop_control:
    label: "{{ item.path }}"
  vars:
    ifcfg_re: 'ifcfg-(.+)'
    interface: "{{ item.path | regex_search(ifcfg_re, '\\1') | first }}"
  when: interface not in ansible_interfaces
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Configure parent adapters
  template:
    src: parent_ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ item.interface }}"
    mode: 0644
  loop: "{{ rocev2_vlan_interfaces }}"
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Configure VLAN child adapters
  template:
    src: vlan_ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ item.interface }}.{{ item.vlan_id }}"
    mode: 0644
  loop: "{{ rocev2_vlan_interfaces }}"
  loop_control:
    label: "{{ item.interface }}: {{ item.vlan_id }}"
    extended: true
  vars:
    priority: "{{ (item.vlan_id | string)[0] }}"
    vlan_device: "ansible_{{ item.interface | replace('-', '_') }}"
    mac_address: "{{ lookup('vars', vlan_device).macaddress }}"
    ipv4_address: "{{ rocev2_ip_list[ansible_loop.index0] }}"
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Remove non-confirming VLAN configurations
  file:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    state: absent
  loop: "{{ ansible_interfaces }}"
  vars:
    interface_re: '([^.]+)\.(.+)'
    found_interface: "{{ item | regex_search(interface_re, '\\1') | first }}"
    found_vlan: "{{ item | regex_search(interface_re, '\\2') | first }}"
    matching_interfaces: "{{ rocev2_vlan_interfaces | selectattr('interface', 'equalto', found_interface) | list }}"
    conforming_interfaces: "{{ matching_interfaces | selectattr('vlan_id', 'equalto', found_vlan | int ) | list }}"
  when:
    - item is regex(interface_re)
    - conforming_interfaces | length == 0
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Flush handlers
  meta: flush_handlers
