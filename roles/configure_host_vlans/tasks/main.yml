#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Assert VLAN lists are defined
  assert:
    that:
      - tcp_vlan_id_list is defined
      - rocev2_vlan_id_list is defined
      - (tcp_vlan_id_list + rocev2_vlan_id_list) | length > 0
    fail_msg: "{{ inventory_hostname }} needs 'tcp_vlan_id_list' and 'rocev2_vlan_id_list' variables defined"

- name: Get VLAN map
  include_role:
    name: get_vlan_map
  when: interface_switch_vlan_map is not defined

- name: Find ifcfg files
  find:
    paths: /etc/sysconfig/network-scripts/
    patterns: "ifcfg-*"
  register: ifcfg_files

- name: Remove ifcfg files for adapters that do not exist
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ifcfg_files.files }}"
  loop_control:
    label: "{{ item.path }}"
  vars:
    ifcfg_re: 'ifcfg-(.+)'
    interface: "{{ item.path | regex_search(ifcfg_re, '\\1') | first }}"
  when: interface not in ansible_interfaces
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Configure parent adapters
  template:
    src: parent_ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ device.local_interface }}"
    mode: 0644
  loop: "{{ interface_switch_vlan_map }}"
  loop_control:
    label: "{{ device.local_interface }}"
    loop_var: device
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Get last octet of IP addresses for high-speed interfaces
  include_role:
    name: get_last_octet

- name: Configure ConnectX adapters
  template:
    src: vlan_ifcfg.j2
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ device }}.{{ vlan.id }}"
    mode: 0644
  loop: "{{ interface_switch_vlan_map }}"
  loop_control:
    label: "{{ device }}: {{ item.vlan_id }}"
  vars:
    device: "{{ item.local_interface }}"
    vlan: "{{ (rocev2_vlans + tcp_vlans) | selectattr('id', 'equalto', item.vlan_id) | list | first }}"
    priority: "{{ (vlan.id | string)[0] }}"
    vlan_device: "ansible_{{ device | replace('-', '_') }}"
    mac_address: "{{ lookup('vars', vlan_device).macaddress }}"
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Remove non-conforming VLAN configurations
  file:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
    state: absent
  loop: "{{ ansible_interfaces }}"
  vars:
    interface_re: '([^.]+)\.(.+)'
    parent_interface: "{{ item | regex_search(interface_re, '\\1') | first }}"
    found_vlan: "{{ item | regex_search(interface_re, '\\2') | first }}"
    matching_interface_list: "{{ interface_switch_vlan_map | selectattr('local_interface', 'equalto', parent_interface) | list }}"
  when:
    - item is regex(interface_re)
    - matching_interface_list | length > 0
    - matching_interface_list | selectattr('vlan_id', 'equalto', found_vlan | int) | list | count == 0
  notify:
    - Restart network service
    - Reload facts
  become: true

- name: Flush handlers
  meta: flush_handlers
