---

- name: Get spdk status
  command: ./setup.sh status
  changed_when: false
  args:
    chdir: "{{ start_dss_target_dest_dir }}/scripts"
  register: spdk_status
  become: true

- name: Assert disks in SPDK mode
  assert:
    that: >
     spdk_status.stdout is search('uio_pci_generic') or
     spdk_status.stdout is search('vfio-pci')
    msg: Cannot format BlobFS. Disks are not in SPDK mode. Start DSS software first.

- name: Stat nvmf.in.conf
  stat:
    path: "{{ dss_target_conf_dir }}/nvmf.in.conf"
  register: nvmf_in_conf

- name: Assert nvmf.in.conf found
  assert:
    that: nvmf_in_conf.stat.exists
    msg: nvmf.in.conf not found. Start DSS software first.

- name: Find NVMe PCIe addresses in nvmf.in.conf
  command: >
    grep 'TransportID "trtype:PCIe traddr' {{ dss_target_conf_dir }}/nvmf.in.conf
  register: pcie_addrs
  changed_when: false
  failed_when: false

- name: Assert PCIe addresses found
  assert:
    that: pcie_addrs.stdout_lines | length > 0
    msg: |
      Disk serial numbers not found in blobfs.mkfs.in.conf for firmware {{ target_fw_version }}.
      Please verify that 'target_fw_version' var matches desired firmware.
      Execute 'stop_reset_dss_software' playbook to put disks back into kernel mode.
      Then verify desired SSD firmware version.

- name: Create blobfs scripts for each device
  template:
    src: blobfs.mkfs.in.conf.j2
    dest: "{{ dss_target_conf_dir }}/blobfs.mkfs.in.{{ ansible_loop.index0 }}.conf"
    mode: 0644
  loop: "{{ pcie_addrs.stdout_lines }}"
  loop_control:
    extended: true
  register: create_blobfs_conf
  become: true

- name: Create BlobFS filesystem for KV-Block
  include_tasks: format_blobfs.yml
  when: dss_target_mode is search('kv_block')
