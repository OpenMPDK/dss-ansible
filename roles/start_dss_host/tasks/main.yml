#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Set target/host group vars
  set_fact:
    target_hostnames: "{{ (groups['servers'] | d([]) + groups['targets'] | d([])) | unique }}"
    host_hostnames: "{{ (groups['servers'] | d([]) + groups['hosts'] | d([])) | unique }}"

- name: Stat DSS Host path
  stat:
    path: "{{ start_dss_host_dir }}"
  register: dss_host_path
  when: inventory_hostname in host_hostnames

- name: Assert DSS Host path exists
  assert:
    that: dss_host_path.stat.exists
    fail_msg: DSS Host is not installed. Execute 'deploy_dss_software.yml' playbook first.
  when: inventory_hostname in host_hostnames

- name: Stat KV kernel drivers
  stat:
    path: "{{ start_dss_host_dir }}/openmpdk_driver/kernel_v5.1_nvmf/{{ item }}"
  register: kv_kernel_drivers
  loop:
    - nvme-core.ko
    - nvme-fabrics.ko
    - nvme-fc.ko
    - nvme-rdma.ko
    - nvme-tcp.ko
    - nvme.ko
  when: inventory_hostname in host_hostnames

- name: Check for missing KV kernel drivers
  set_fact:
    missing_drivers: true
  when:
    - inventory_hostname in host_hostnames
    - not item.stat.exists
  loop: "{{ kv_kernel_drivers.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Configure Driver
  command: /usr/bin/python2 ./dss_host.py config_driver
  args:
    chdir: "{{ start_dss_host_dir }}/bin"
  when:
    - inventory_hostname in host_hostnames
    - missing_drivers is defined
  become: true

- name: Set cluster_num_list var
  set_fact:
    cluster_num_list: "{{ cluster_num_list | default([]) }} +
      [
        {% for host in ansible_play_hosts %}
            '{{ hostvars[host].cluster_num | d(cluster_num) }}'{% if not loop.last %},{% endif %}
        {% endfor %}
      ]"
  when: cluster_num_list is not defined
  run_once: true

- name: Setup hosts by cluster
  include_tasks: setup_host_clusters.yml
  loop: "{{ cluster_num_list | unique }}"
  loop_control:
    loop_var: current_cluster_num
  when: current_cluster_num | string == cluster_num | string
