#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Stat DSS Host path
  stat:
    path: "{{ start_dss_host_dir }}"
  register: dss_host_path

- name: Assert DSS Host path exists
  assert:
    that: dss_host_path.stat.exists
    fail_msg: DSS Host is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Stat KV kernel drivers
  stat:
    path: "{{ start_dss_host_dir }}/openmpdk_driver/kernel_v5.1_nvmf/{{ item }}"
  register: kv_kernel_drivers
  loop:
    - nvme-core.ko
    - nvme-fabrics.ko
    - nvme-fc.ko
    - nvme-rdma.ko
    - nvme-tcp.ko
    - nvme.ko

- name: Check for missing KV kernel drivers
  set_fact:
    missing_drivers: true
  when: not item.stat.exists
  loop: "{{ kv_kernel_drivers.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Configure Driver
  command: ./dss_host.py config_driver
  args:
    chdir: "{{ start_dss_host_dir }}/bin"
  when: missing_drivers is defined
  become: true

- name: Get RoCEv2 IP Addresses
  include_role:
    name: get_vlan_ips
  vars:
    vlan_list: "{{ rocev2_vlans }}"
  when: rocev2_ip_list is not defined

- name: Set rocev2_ip_list and first_rocev2_ip_list var if IP's auto-discovered
  set_fact:
    rocev2_ip_list: "{{ vlan_ip_list }}"
    first_rocev2_ip_list: "{{ vlan_ip_list | first }}"
  when: rocev2_ip_list is not defined

- name: Set first_rocev2_ip_list var if IP's user-defined
  set_fact:
    first_rocev2_ip_list: "{{ rocev2_ip_list | first }}"
  when: rocev2_ip_list is defined

- name: Assert that at least one RoCEv2 IP is present
  assert:
    that:
      - first_rocev2_ip_list is defined
      - first_rocev2_ip_list | length > 0
    fail_msg: "No RoCEv2 IPs configured on any Mellanox adapter. Please configure at least one IP to deploy target."
    success_msg: "RoCEv2 IP(s) detected."

- name: Set first_vlan_ip_list var
  set_fact:
    first_vlan_ip_list: "{{ first_vlan_ip_list | default([]) + [hostvars[host].first_rocev2_ip_list] }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: host
  run_once: true

- name: Check number of listeners in nvmf.in.conf
  shell: |
    grep '^  Listen RDMA' {{ start_dss_host_nvmf_in_conf }} | wc -l
  changed_when: false
  register: num_listeners

- name: Set expected_num_subsystems var
  set_fact:
    expected_num_subsystems: "{{ num_listeners.stdout }}"

- name: Set combined_expected_num_subsystems var
  set_fact:
    combined_expected_num_subsystems: "{{ (combined_expected_num_subsystems | default(0) | int) + hostvars[host].expected_num_subsystems | int }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: host
  run_once: true

- name: Set dss_host_kvpair cache settings if physical host
  set_fact:
    dss_host_kvpair: "{{ dss_host_kvpair | default('') }} nkv_use_read_cache=1 nkv_use_data_cache=1"
  when: ansible_virtualization_role == "host"

- name: Create dss_host_config_host.sh script
  copy:
    content: >
      ./dss_host.py config_host -a
      {% for ip in first_vlan_ip_list %}{{ ip }}{% if not loop.last %} {% endif %}{% endfor %}
      -p {{ start_dss_host_port }}
      -i {{ start_dss_host_qpairs }} -m {{ start_dss_host_mem_align }}
      {% if dss_host_kvpair is not none %}-x {{ dss_host_kvpair }}{% endif %}
    mode: 0755
    dest: "{{ start_dss_host_dir }}/bin/dss_host_config_host.sh"
  become: true

- name: Configure Driver
  include_tasks: configure_driver.yml
  loop: "{{ range(1,4) | list }}"
  loop_control:
    loop_var: config_num

- name: Assert all subsystems are mounted
  assert:
    that:
      - all_subsystems_mounted is defined
      - all_subsystems_mounted == true
    fail_msg: |
      Failed to mount all subsystems.
      Expected number of subsystems: {{ expected_num_subsystems }}
      Actual number of mounted subsystems: {{ post_subsystems_found }}

- name: Execute dss_host_config_host.sh script
  command: sh ./dss_host_config_host.sh
  args:
    chdir: "{{ start_dss_host_dir }}/bin"
  when: subsystems_found is not defined
  become: true
