# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Find running target process
  ansible.builtin.command: "pgrep reactor_"
  register: nvmf_ps
  changed_when: false
  failed_when: false

- name: Kill -2 target processes
  ansible.builtin.command: "kill -2 {{ pid }}"
  register: kill_nvmf
  changed_when: kill_nvmf.stdout is not search('No such process')
  failed_when: false
  loop: "{{ nvmf_ps.stdout_lines }}"
  loop_control:
    loop_var: pid
  become: true

- name: Wait for nvmf_tgt process to stop
  ansible.builtin.command: "pgrep reactor_"
  register: postnvmf_ps
  until: postnvmf_ps.rc != 0
  retries: 120
  delay: 5
  changed_when: false
  failed_when: false

- name: Kill -9 stuck target processes
  ansible.builtin.command: "kill -9 {{ pid }}"
  register: kill9_nvmf
  changed_when: kill9_nvmf.stdout is not search('No such process')
  failed_when: false
  loop: "{{ postnvmf_ps.stdout_lines }}"
  loop_control:
    loop_var: pid
  when: postnvmf_ps.failed
  become: true

- name: Wait for nvmf_tgt process to stop after kill -9
  ansible.builtin.command: "pgrep reactor_"
  register: postnvmf_ps9
  until: postnvmf_ps9.rc != 0
  retries: 120
  delay: 5
  changed_when: false
  failed_when: false
  when: postnvmf_ps.failed
