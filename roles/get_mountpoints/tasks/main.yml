# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Init vars
  ansible.builtin.set_fact:
    standalone_minio: "{{ standalone_minio | d(false) }}"

- name: Get Combined VLAN IP map
  ansible.builtin.include_role:
    name: get_combined_vlan_ip_map

- name: Assert Subsystems mounted
  ansible.builtin.assert:
    that: (nvme_subsys.stdout | from_json).Subsystems is defined
    msg: Subsystems are not mounted. Run `start_dss_software` playbook first.
  when: inventory_hostname in host_hostnames

- name: Set flattened_subsystems
  ansible.builtin.set_fact:
    flattened_subsystems: "{{ flattened_subsystems | d([]) }} +
      [
        {
          'NQN': '{{ item[0].NQN }}',
          'Name': '{{ item[0].Name }}',
          'Paths': {{ item[1].Paths }}
        }
      ]"
  loop: "{{ (nvme_subsys.stdout | from_json).Subsystems | batch(2) | list }}"
  loop_control:
    label: "{{ item[0].Name }}"
  when: inventory_hostname in host_hostnames

- name: Set rdma_subsystems var
  ansible.builtin.set_fact:
    rdma_subsystems: "{{ flattened_subsystems | json_query('[?Paths[?Transport==`rdma`]]') }}"
  when: inventory_hostname in host_hostnames

- name: Assert rdma subsystems present
  ansible.builtin.assert:
    that: rdma_subsystems | length > 0
    msg: "No RDMA subsystems are mounted."
  when: inventory_hostname in host_hostnames

- name: Set nvme_mountpoints
  ansible.builtin.set_fact:
    nvme_mountpoints: |
      [
      {% for subsystem in rdma_subsystems %}
        {% set subsystem_loop_last = loop.last %}
        {% for path in subsystem.Paths %}
          {
            "name": "{{ subsystem.Name }}",
            "nqn": "{{ subsystem.NQN }}",
            "dev": "{{ path.Name | regex_search('nvme(.+)', '\1') | d([]) | first }}",
            "transport": "{{ path.Transport }}",
            "ip": "{{ path.Address | regex_search('traddr=([^ ]+)', '\1') | d([]) | first }}",
            "port": "{{ path.Address | regex_search('trsvcid=(.+)', '\1') | d([]) | first }}",
            "state": "{{ path.State }}"
          }{% if (not loop.last) or (not subsystem_loop_last) %},
          {% endif %}
        {%- endfor %}
      {% endfor %}
      ]
  when: inventory_hostname in host_hostnames

- name: Assert subsystems mounted
  ansible.builtin.assert:
    that: nvme_mountpoints | length > 0
    msg: NVMeOF subsystems not mounted. Please verify DSS software is running (start_dss_software)
  when: inventory_hostname in host_hostnames

- name: Find min/max devmap
  ansible.builtin.set_fact:
    subsys_range: >-
      {% set dev_range = { 'min': 999, 'max': 0 } -%}
      {%- for subsys in nvme_mountpoints -%}
        {%- if subsys.ip in vlan_pair.rocev2 -%}
          {%- if subsys.dev | int < dev_range.min | int %}{% if dev_range.update({ 'min': subsys.dev, 'max': dev_range.max }) %}{% endif %}{% endif -%}
          {%- if subsys.dev | int > dev_range.max | int %}{% if dev_range.update({ 'min': dev_range.min, 'max': subsys.dev }) %}{% endif %}{% endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ subsys_range | default([]) +
        [{'min': dev_range.min,
          'max': dev_range.max}] }}
  loop: "{{ combined_vlan_ip_map }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
    label: "{{ ansible_loop.index0 }}"
  when: inventory_hostname in host_hostnames

- name: Assert mountpoints found for each VLAN
  ansible.builtin.assert:
    that: item.min != 999
    msg: "NVMe mountpoints not found for all VLANs. Check rocev2_vlans or rocev2_ip_list vars."
  loop: "{{ subsys_range }}"
  when: inventory_hostname in host_hostnames

- name: Set min_subsystem_list
  ansible.builtin.set_fact:
    min_subsystem_list: |
      [
        {% for vlan in subsys_range %}
          "{{ (nvme_mountpoints | selectattr('dev', 'equalto', vlan.min) | list)[0].nqn }}"{%- if not loop.last %}, {% endif %}
        {% endfor %}
      ]
  when: inventory_hostname in host_hostnames

- name: Set standalone_minio var
  ansible.builtin.set_fact:
    standalone_minio: true
  when:
    - inventory_hostname in host_hostnames
    - groups['servers'] | d([]) | length == 1
    - (tcp_alias_list | length == 1 or
      (nvme_mountpoints | length /  tcp_alias_list | length) < 4)

- name: Set standalone_minio var if disaggregated
  ansible.builtin.set_fact:
    standalone_minio: true
  when:
    - inventory_hostname in groups['hosts'] | d([])
