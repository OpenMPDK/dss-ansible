#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Init vars
  set_fact:
    vlan_ip_map: []
    combined_vlan_ip_map: []
    included_hosts: []

- name: Set included_hosts var
  set_fact:
    included_hosts: "{{ included_hosts | default([]) + [ host ] }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: host
  when: hostvars[host].cluster_num | d(cluster_num) | string == current_cluster_num | string
  run_once: true

- name: Set TCP - RoCEv2 IP map
  set_fact:
    vlan_ip_map: "{{ vlan_ip_map | default([]) +
                  [{'tcp_alias': tcp_alias,
                    'rocev2_ip': rocev2_ip }] }}"
  with_together:
    - "{{ tcp_alias_list }}"
    - "{{ rocev2_ip_list }}"
  vars:
    tcp_alias: "{{ item.0.alias }}"
    rocev2_ip: "{{ item.1 }}"

- name: Set combined_vlan_ip_map
  set_fact:
    combined_vlan_ip_map: "{{ combined_vlan_ip_map | default([]) }} +
      [{ 'rocev2': [{% for host in included_hosts -%}
      '{{ hostvars[host].vlan_ip_map[ansible_loop.index0].rocev2_ip }}'
      {%- if not loop.last %}, {% endif %}{% endfor %}],
          'tcp': [{% for host in included_hosts -%}
      '{{ hostvars[host].vlan_ip_map[ansible_loop.index0].tcp_alias }}'
      {%- if not loop.last %}, {% endif %}{% endfor %}] }]"
  loop: "{{ range(0, vlan_ip_map | length) | list }}"
  loop_control:
    label: "{{ ansible_loop.index0 }}"
    extended: true
  run_once: true

- name: NVMe list subsystems
  command: nvme list-subsys -o json
  changed_when: false
  register: nvme_subsys
  become: true

- name: Assert Subsystems mounted
  assert:
    that: (nvme_subsys.stdout | from_json).Subsystems is defined
    msg: Subsystems are not mounted. Run `start_dss_software` playbook first.

- name: Set flattened_subsystems
  set_fact:
    flattened_subsystems: "{{ flattened_subsystems | d([]) }} +
      [
        {
          'NQN': '{{ item[0].NQN }}',
          'Name': '{{ item[0].Name }}',
          'Paths': {{ item[1].Paths }}
        }
      ]"
  loop: "{{ (nvme_subsys.stdout | from_json).Subsystems | batch(2) | list }}"
  loop_control:
    label: "{{ item[0].Name }}"

- name: Set rdma_subsystems var
  set_fact:
    rdma_subsystems: "{{ flattened_subsystems | json_query('[?Paths[?Transport==`rdma`]]') }}"

- name: Assert rdma subsystems present
  assert:
    that: rdma_subsystems | length > 0
    msg: "No RDMA subsystems are mounted."

- name: Set nvme_mountpoints
  set_fact:
    nvme_mountpoints: |
      [
      {% for subsystem in rdma_subsystems %}
        {% set subsystem_loop_last = loop.last %}
        {% for path in subsystem.Paths %}
          {
            "name": "{{ subsystem.Name }}",
            "nqn": "{{ subsystem.NQN }}",
            "dev": "{{ path.Name | regex_search('nvme(.+)', '\1') | d([]) | first }}",
            "transport": "{{ path.Transport }}",
            "ip": "{{ path.Address | regex_search('traddr=([^ ]+)', '\1') | d([]) | first }}",
            "port": "{{ path.Address | regex_search('trsvcid=(.+)', '\1') | d([]) | first }}",
            "state": "{{ path.State }}"
          }{% if (not loop.last) or (not subsystem_loop_last) %},
          {% endif %}
        {%- endfor %}
      {% endfor %}
      ]

- name: Assert subsystems mounted
  assert:
    that: nvme_mountpoints | length > 0
    msg: NVMeOF subsystems not mounted. Please verify DSS software is running (start_dss_software)

- name: Find min/max devmap
  set_fact:
    subsys_range: >-
      {% set dev_range = { 'min': 999, 'max': 0 } -%}
      {%- for subsys in nvme_mountpoints -%}
        {%- if subsys.ip in vlan_pair.rocev2 -%}
          {%- if subsys.dev | int < dev_range.min | int %}{% if dev_range.update({ 'min': subsys.dev, 'max': dev_range.max }) %}{% endif %}{% endif -%}
          {%- if subsys.dev | int > dev_range.max | int %}{% if dev_range.update({ 'min': dev_range.min, 'max': subsys.dev }) %}{% endif %}{% endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ subsys_range | default([]) +
        [{'min': dev_range.min,
          'max': dev_range.max}] }}
  loop: "{{ combined_vlan_ip_map }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
    label: "{{ ansible_loop.index0 }}"
  run_once: true

- name: Assert mountpoints found for each VLAN
  assert:
    that: item.min != 999
    msg: "NVMe mountpoints not found for all VLANs. Check rocev2_vlans or rocev2_ip_list vars."
  loop: "{{ subsys_range }}"

- name: Set min_subsystem_list
  set_fact:
    min_subsystem_list: |
      [
        {% for vlan in subsys_range %}
          "{{ (nvme_mountpoints | selectattr('dev', 'equalto', vlan.min) | list)[0].nqn }}"{%- if not loop.last %}, {% endif %}
        {% endfor %}
      ]

- name: Set standalone_minio var
  set_fact:
    standalone_minio: true
  when:
    - groups['servers'] | length == 1
    - (tcp_alias_list | length == 1 or
      (nvme_mountpoints | length /  tcp_alias_list | length) < 4)
