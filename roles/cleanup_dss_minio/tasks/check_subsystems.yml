#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Init vars
  set_fact:
    included_targets: []
    combined_expected_num_subsystems: 0

- name: Set included_targets var
  set_fact:
    included_targets: "{{ included_targets + [ target ] }}"
  loop: "{{ target_hostnames }}"
  loop_control:
    loop_var: target
  when: hostvars[target].cluster_num | d(cluster_num) | string == current_cluster_num | string
  run_once: true

- name: Check number of listeners in nvmf.in.conf
  shell: |
    grep '^  Listen RDMA' {{ target_conf_file }} | wc -l
  changed_when: false
  register: num_listeners
  when: inventory_hostname in included_targets

- name: Set expected_num_subsystems var
  set_fact:
    expected_num_subsystems: "{{ num_listeners.stdout }}"
  when: inventory_hostname in included_targets

- name: Set combined_expected_num_subsystems var
  set_fact:
    combined_expected_num_subsystems: "{{ combined_expected_num_subsystems | int + hostvars[host].expected_num_subsystems | int }}"
  loop: "{{ included_targets }}"
  loop_control:
    loop_var: host
  when: host in target_hostnames
  run_once: true

- name: NVMe list subsystems
  command: nvme list-subsys
  changed_when: false
  register: nvme_subsys
  become: true
  when: inventory_hostname in host_hostnames

- name: Check number of mounted subsystems
  set_fact:
    subsystems_found: "{{ nvme_subsys.stdout | regex_findall(nvme_re) | length }}"
  vars:
    nvme_re: 'traddr=[^\s]+\strsvcid=[^\s]+\slive'
  when: inventory_hostname in host_hostnames

- name: Assert subsystems mounted
  assert:
    that: subsystems_found == combined_expected_num_subsystems
    msg: >
      Subsystems are not mounted. Cannot cleanup MinIO unless DSS software is started.
      Expected {{ combined_expected_num_subsystems }}.
      Found {{ subsystems_found }}.
  become: true
  when: inventory_hostname in host_hostnames
