#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Get Subsystems NQNs
  include_role:
    name: get_subsystem_nqns

- name: Start compaction
  command: "{{ target_script_dir }}/dss_rpc.py -s /var/run/spdk.sock rdb_compact -n {{ item }}"
  loop: "{{ subsystem_nqns }}"
  become: true
  when: dss_target_mode is search('kv_block')

- name: Check compaction status
  command: "{{ target_script_dir }}/dss_rpc.py -s /var/run/spdk.sock rdb_compact --get_status -n {{ item }}"
  register: compaction_status
  loop: "{{ subsystem_nqns }}"
  until: >
    compaction_status.rc !=0 or
    compaction_status.stdout is search('IDLE')
  changed_when: false
  failed_when: >
    compaction_status.rc !=0 or
    (compaction_status.stdout is not search('IDLE') and
    compaction_status.stdout is not search('IN PROGRESS'))
  retries: "{{ (start_compaction_timeout | int / start_compaction_delay | int) | int }}"
  delay: "{{ start_compaction_delay }}"
  become: true
  when: dss_target_mode is search('kv_block')
