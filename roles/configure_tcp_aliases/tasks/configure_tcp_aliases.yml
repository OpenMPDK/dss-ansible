#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Initialize vars
  set_fact:
    tcp_adapter_list: []
    tcp_adapter_parent_list: []
    tcp_adapter_numa_list: []
    tcp_alias_list: []
    combined_family_list: []
    hostnames_list: []

- name: Query IPs from tcp_ip_list
  shell: "getent ahosts {{ item }} | awk '{ print $1 }' | grep -v '^::1' | head -n 1"
  loop: "{{ tcp_ip_list }}"
  changed_when: false
  register: getent

- name: Assert tcp_ip_list contains routable hostnames or IPs
  assert:
    that: "{{ item.stdout | ipaddr != false }}"
    msg: "{{ item.item }} is not routable on this host"
    quiet: true
  loop: "{{ getent.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Assert no duplicate IPs on each host
  assert:
    that: ip_list == unique_ip_list
    msg: "Duplicate IPs found on host: {{ ip_list }}"
  vars:
    ip_list: "{{ getent.results | map(attribute='stdout') | list }}"
    unique_ip_list: "{{ ip_list | unique }}"

- name: Set tcp_adapter_list var
  set_fact:
    tcp_adapter_list: "{{ tcp_adapter_list | d([]) }} +
      [
      {% for interface in ansible_interfaces %}
        {% set ipv6_address_list = (hostvars[inventory_hostname]['ansible_' + interface] | d({})).ipv6 | d([]) | map(attribute='address') | flatten %}
        {% set ipv4_address = ((hostvars[inventory_hostname]['ansible_' + interface] | d({})).ipv4 | d({})).address | default('') %}
        {% if (tcp_ip in ipv6_address_list) or (tcp_ip == ipv4_address) %}
          {
            'inventory_name': '{{ inventory_name }}',
            'tcp_ip': '{{ tcp_ip }}',
            'family': 'IPV{% if tcp_ip | ipv6 %}6{% else %}4{% endif %}',
            'interface': '{{ interface }}'
          }
        {% endif %}
      {% endfor %}
      ]"
  loop: "{{ getent.results }}"
  loop_control:
    label: "{{ inventory_name }}"
  vars:
    tcp_ip: "{{ item.stdout }}"
    inventory_name: "{{ item.item }}"

- name: Assert TCP IPs are found
  assert:
    that: tcp_adapter_list | length > 0
    msg: No TCP IPs configured on host. Configure `tcp_ip_list` var for host. See README.md for details.

- name: Set combined_family_list var
  set_fact:
    combined_family_list: "{{ combined_family_list | d([]) + hostvars[hostname].tcp_adapter_list | map(attribute='family') | list }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: hostname
  run_once: true

- name: Assert all TCP IP's are same family
  assert:
    that: combined_family_list | unique | length == 1
    msg: |
      tcp_ip_list must contain IPs or hostnames of the same family (IPV6 or IPV4) across all hosts in inventory.
      tcp_adapter_list:
      {{ tcp_adapter_list | to_nice_json }}

- name: Assert IP addresses found on host
  assert:
    that: item.stdout in tcp_adapter_list | map(attribute='tcp_ip') | list
    msg: "{{ item.item }} is not assigned to any adapter. Check 'tcp_ip_list' setting."
    quiet: true
  loop: "{{ getent.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Get parent adapters
  shell: "echo $(basename $(readlink /sys/class/net/{{ item.interface }}/lower_* || echo '{{ item.interface }}'))"
  loop: "{{ tcp_adapter_list }}"
  loop_control:
    label: "{{ item.interface }}"
  changed_when: false
  register: parent_adapters

- name: Set tcp_adapter_parent_list var
  set_fact:
    tcp_adapter_parent_list: "{{ tcp_adapter_parent_list | default([]) }} +
      [
        {
          'parent_interface': '{{ item.stdout }}',
          'inventory_name': '{{ item.item.inventory_name }}',
          'tcp_ip': '{{ item.item.tcp_ip }}',
          'family': '{{ item.item.family }}',
          'interface': '{{ item.item.interface }}'
        }
      ]"
  loop: "{{ parent_adapters.results }}"
  loop_control:
    label: "{{ item.item.tcp_ip }}"

- name: Get NUMA for each adapter
  command: "cat /sys/class/net/{{ item.parent_interface }}/device/numa_node"
  changed_when: false
  loop: "{{ tcp_adapter_parent_list }}"
  loop_control:
    label: "{{ item.interface }}"
  register: numa_node_list

- name: Set tcp_adapter_numa_list var
  set_fact:
    tcp_adapter_numa_list: "{{ tcp_adapter_numa_list | default([]) }} +
      [
        {
          'parent_interface': '{{ item.item.parent_interface }}',
          'inventory_name': '{{ item.item.inventory_name }}',
          'tcp_ip': '{{ item.item.tcp_ip }}',
          'family': '{{ item.item.family }}',
          'interface': '{{ item.item.interface }}',
          'numa': {% if item.stdout == '-1' %}0{% else %}{{ item.stdout }}{% endif %}
        }
      ]"
  loop: "{{ numa_node_list.results }}"
  loop_control:
    label: "{{ item.item.tcp_ip }}"

- name: Sort tcp_adapter_numa_list by numa
  set_fact:
    tcp_adapter_numa_list: "{{ tcp_adapter_numa_list | sort(attribute='numa') }}"

- name: set tcp_alias_list var
  set_fact:
    tcp_alias_list: "{{ tcp_alias_list | default([]) }} +
      [
        {
          'parent_interface': '{{ item.parent_interface }}',
          'inventory_name': '{{ item.inventory_name }}',
          'tcp_ip': '{{ item.tcp_ip }}',
          'family': '{{ item.family }}',
          'interface': '{{ item.interface }}',
          'numa': {{ item.numa }},
          'alias': '
            {%- if item.tcp_ip == item.inventory_name -%}
              {{ inventory_hostname_short }}-tcp-{{ ansible_loop.index0 }}
            {%- else -%}
              {{ item.inventory_name }}
            {%- endif -%}'
        }
      ]"
  loop: "{{ tcp_adapter_numa_list }}"
  loop_control:
    label: "{{ item.tcp_ip }}"
    extended: true

- name: Set hostnames_list var for servers
  set_fact:
    hostnames_list: "{{ (hostnames_list | d([]) + groups[item] | d([])) | unique }}"
  loop:
    - servers
    - hosts
    - ufm_hosts
  when: >
    inventory_hostname in groups['servers'] | d([]) or
    inventory_hostname in groups['hosts'] | d([]) or
    inventory_hostname in groups['ufm_hosts'] | d([])

- name: Set hostnames_list var for clients
  set_fact:
    hostnames_list: "{{ (hostnames_list | d([]) + groups[item] | d([])) | unique }}"
  loop:
    - servers
    - hosts
    - clients
  when: inventory_hostname in groups['clients'] | d([])

- name: Set non_resolvable_aliases var
  set_fact:
    needs_aliases: >-
      {%- set needs_alias = { 'value': false } -%}
      {%- for host in hostnames_list -%}
      {%- for tcp_ip in hostvars[host].tcp_alias_list -%}
      {%- if tcp_ip.tcp_ip == tcp_ip.inventory_name -%}
      {%- if needs_alias.update({ 'value': true }) %}{% endif -%}
      {%- endif -%}
      {%- endfor -%}
      {%- endfor -%}
      {{ needs_alias.value }}
  run_once: true

- name: Set hostname aliases in /etc/hosts
  blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK - TCP ALIASES FOR TESS"
    block: |
      {% for host in hostnames_list %}
      {% for tcp_ip in hostvars[host].tcp_alias_list %}
      {% if tcp_ip.tcp_ip == tcp_ip.inventory_name %}
      {{ tcp_ip.tcp_ip }} {{ tcp_ip.alias }}
      {% endif %}
      {% endfor %}
      {% endfor %}
  when: needs_aliases
  become: true

- name: Clear hostname aliases in /etc/hosts if aliases not needed
  blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK - TCP ALIASES FOR TESS"
    block: ''
  when: not needs_aliases
  become: true

- name: Clear legacy alias blocks from /etc/hosts
  blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK - {{ item }} TCP ALIASES FOR TESS"
    block: ''
  loop:
    - SERVER
    - CLIENT
    - UFM
    - HOST
    - TARGET
  become: true
