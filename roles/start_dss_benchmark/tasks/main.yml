---

- name: Check minio connection
  command: "{{ start_dss_benchmark_minio_dir }}/mc ls {{ minio_mc_alias }}"
  changed_when: false

- name: Generate cluster.json template to master client
  template:
    src: cluster.json.j2
    dest: "{{ start_dss_benchmark_dest_dir }}/cluster.json"
    mode: 0644
  run_once: true
  when: inventory_hostname in groups['clients']
  register: cluster_json
  become: true

- name: Copy image.json to master client
  copy:
    src: image.json
    dest: "{{ start_dss_benchmark_dest_dir }}/image.json"
    mode: 0644
  run_once: true
  when: inventory_hostname in groups['clients']
  register: image_json
  become: true

- name: Prepare list of check_bucket commands
  set_fact:
    check_bucket_commands: >-
      [
      {%- set client_index = { 'value': 0 } -%}
      {% for server in groups['servers'] -%}
          {% set server_loop = loop -%}
          {% for tcp_ip in hostvars[server].tcp_vlan_ip_list -%}
              {% if groups['clients'][client_index.value] is defined %}
      "{{ start_dss_benchmark_dest_dir }}/scripts/check_bucket.py
      --server {{ tcp_ip }}:{{ minio_port }}
      --access-key {{ minio_access_key }}
      --secret-key {{ minio_secret_key }}
      --bucket {{ benchmark_bucket_prefix }}{{ client_index.value + 1 }}
      --objs {{ benchmark_objects }}"
                  {%- if ((not loop.last) and
                      (not server_loop.last)) or
                      (groups['clients'][client_index.value + 1] is defined) -%}
                  ,
                  {%- endif -%}
              {% if client_index.update({ 'value': client_index.value + 1 }) %}{% endif -%}
              {% endif -%}
          {% endfor -%}
      {% endfor %}]
  run_once: true

- name: Check if benchmark data needs to be re-generated
  command: "{{ check_bucket_command }}"
  changed_when: false
  failed_when: false
  loop: "{{ check_bucket_commands }}"
  loop_control:
    loop_var: check_bucket_command
  register: check_bucket_results
  run_once: true

- name: Prepare and execute benchmark
  block:
    - name: Execute generate on master client
      shell: >
        set -o pipefail &&
        python3
        {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
        generate
        --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
        --obj-dist-file {{ start_dss_benchmark_dest_dir }}/image.json
        --objects {{ benchmark_objects }}
        --warp-binary {{ start_dss_benchmark_dest_dir }}/warp
        --access-key {{ minio_access_key }}
        --secret-key "{{ minio_secret_key }}"
        --output-dir {{ start_dss_benchmark_log_dir }}
        --client-start-port {{ benchmark_client_start_port }}
        | tee -a {{ start_dss_benchmark_log_dir }}/nkv-benchmark.log
      run_once: true
      register: bench_generate
      no_log: true
      vars:
        check_buckets_rc_list: "{{ check_bucket_results.results | map(attribute='rc') | list | unique | join(',') }}"
      when:
        - inventory_hostname in groups['clients']
        - check_buckets_rc_list != '0' or
          cluster_json.changed or
          image_json.changed
      become: true

    - name: Enable ustat
      lineinfile:
        path: "{{ start_dss_benchmark_conf_file }}"
        regexp: '^    "nkv_need_path_stat":'
        line: '    "nkv_need_path_stat": 1,'
      when: inventory_hostname in groups['servers']
      become: true

    - name: Execute benchmark on master client
      shell: >
        set -o pipefail &&
        python3
        {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
        benchmark
        --num-clients {{ benchmark_clients }}
        --rate-limit {{ benchmark_rate_limit }}
        --software-rate-limit {{ benchmark_software_rate_limit }}
        --ustat-profiles "{{ benchmark_ustat_profiles }}"
        --warp-binary {{ start_dss_benchmark_dest_dir }}/warp
        --access-key {{ minio_access_key }}
        --secret-key "{{ minio_secret_key }}"
        --output-dir {{ start_dss_benchmark_log_dir }}
        --duration {{ benchmark_duration }}
        --concurrent {{ benchmark_concurrent }}
        --cap {{ benchmark_cap }}
        --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
        --ustat-binary-path {{ start_dss_benchmark_dest_dir }}/ustat
        --client-start-port {{ benchmark_client_start_port }}
        | tee -a {{ start_dss_benchmark_log_dir }}/nkv-benchmark.log
      run_once: true
      register: bench_benchmark
      no_log: true
      when: inventory_hostname in groups['clients']
      become: true

  rescue:
    - name: Terminate failed benchmark
      command: >
        python3
        {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
        terminate
        --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
      run_once: true
      when: inventory_hostname in groups['clients']
      become: true

    - name: Remove packet pacing from servers
      include_role:
        name: remove_packet_pacing
      when: inventory_hostname in groups['servers']

    - name: Benchmark Generate Failed
      fail:
        msg: |
          -- bench.py generate command --
          {{ bench_generate.cmd }}
          -- generate log --
          {{ bench_generate.stderr }}
      when:
        - bench_generate.failed is defined
        - inventory_hostname in groups['clients']
      run_once: true

    - name: Benchmark Failed
      fail:
        msg: |
          -- bench.py benchmark command --
          {{ bench_benchmark.cmd }}
          -- benchmark log --
          {{ bench_benchmark.stderr }}
      when:
        - bench_benchmark.failed is defined
        - inventory_hostname in groups['clients']
      run_once: true

  always:
    - name: Disable ustat
      lineinfile:
        path: "{{ start_dss_benchmark_conf_file }}"
        regexp: '^    "nkv_need_path_stat":'
        line: '    "nkv_need_path_stat": 0,'
      when: inventory_hostname in groups['servers']
      become: true
