#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Set combined_endpoints var
  set_fact:
    combined_endpoints: "{{ combined_endpoints | d([]) }} +
    {% for tcp in hostvars[server].tcp_alias_list %}
      [
        {{ tcp }}{% if not loop.last %},{% endif %}
      ]{% if not loop.last %} +{% endif %}
    {% endfor %}
    "
  loop: "{{ groups['servers'] }}"
  loop_control:
    loop_var: server
  run_once: true

- name: Check minio connection
  command: "{{ start_dss_benchmark_minio_dir }}/mc ls {{ minio_mc_alias }}"
  when: inventory_hostname in groups['clients']
  changed_when: false

- name: Get minio url from mc
  command: "{{ start_dss_benchmark_minio_dir }}/mc config host list {{ minio_mc_alias }} --json"
  when: inventory_hostname in groups['clients']
  register: mc_host_config
  changed_when: false

- name: Set minio_server and minio_host vars
  set_fact:
    minio_server: "{{ mc_url | regex_search(mc_re, '\\1') | first }}"
    minio_host: "{{ mc_url | regex_search(mc_re, '\\2') | first }}"
  vars:
    mc_re: '^http://(([^:]+):.+)'
    mc_url: "{{ (mc_host_config.stdout | from_json).URL | default('') }}"
  when: inventory_hostname in groups['clients']

- name: Assert IPV4
  assert:
    that: endpoint_family == 'IPV4'
    msg: "DSS AI Benchmark does not currently support IPV6"
  vars:
    endpoint_family: "{{ (combined_endpoints | selectattr('alias', 'equalto', minio_host) | first).family }}"
  when: inventory_hostname in groups['clients']

- name: Set subnets var
  set_fact:
    subnets: "{{ subnets | d([]) }} +
      [
        {
          'minioServers': ['{{ hostvars[client_host].minio_server }}'],
          'minioHosts': ['{{ hostvars[client_host].minio_host }}'],
          'minioBucket': '{{ benchmark_bucket_prefix }}{{ bucket_number }}',
          'warpClients': ['{{ hostvars[client_host].tcp_alias_list[0].alias }}']
        }
      ]"
  loop: "{{ groups['clients'] }}"
  loop_control:
    loop_var: client_host
    index_var: bucket_number
  when: inventory_hostname in groups['clients']
  run_once: true

- name: Generate cluster.json template to master client
  template:
    src: cluster.json.j2
    dest: "{{ start_dss_benchmark_dest_dir }}/cluster.json"
    mode: 0644
  run_once: true
  when: inventory_hostname in groups['clients']
  register: cluster_json
  become: true

- name: Copy image.json to master client
  copy:
    src: image.json
    dest: "{{ start_dss_benchmark_dest_dir }}/image.json"
    mode: 0644
  run_once: true
  when: inventory_hostname in groups['clients']
  register: image_json
  become: true

- name: Prepare list of check_bucket commands
  set_fact:
    check_bucket_commands: >-
      [
      {%- set client_index = { 'value': 0 } -%}
      {% for server in groups['servers'] -%}
          {% set server_loop = loop -%}
          {% for tcp_ip in hostvars[server].tcp_alias_list -%}
              {% if groups['clients'][client_index.value] is defined %}
      "{{ start_dss_benchmark_dest_dir }}/scripts/check_bucket.py
      --server {{ tcp_ip.alias }}:{{ minio_port }}
      --access-key {{ minio_access_key }}
      --secret-key {{ minio_secret_key }}
      --bucket {{ benchmark_bucket_prefix }}{{ client_index.value + 1 }}
      --objs {{ benchmark_objects }}"
                  {%- if ((not loop.last) and
                      (not server_loop.last)) or
                      (groups['clients'][client_index.value + 1] is defined) -%}
                  ,
                  {%- endif -%}
              {% if client_index.update({ 'value': client_index.value + 1 }) %}{% endif -%}
              {% endif -%}
          {% endfor -%}
      {% endfor %}]
  run_once: true

- name: Create dss_benchmark_generate.sh script
  copy:
    content: >
      python3
      {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
      generate
      --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
      --obj-dist-file {{ start_dss_benchmark_dest_dir }}/image.json
      --objects {{ benchmark_objects }}
      --warp-binary {{ start_dss_benchmark_dest_dir }}/warp
      --access-key {{ minio_access_key }}
      --secret-key "{{ minio_secret_key }}"
      --output-dir {{ dss_log_dir }}
      --client-start-port {{ benchmark_client_start_port }}
    dest: "{{ start_dss_benchmark_dest_dir }}/scripts/dss_benchmark_generate.sh"
    mode: 0755
  run_once: true
  when: inventory_hostname in groups['clients']
  become: true

- name: Create dss_benchmark.sh script
  copy:
    content: >
      python3
      {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
      benchmark
      --num-clients {{ benchmark_clients }}
      --rate-limit {{ benchmark_rate_limit }}
      --software-rate-limit {{ benchmark_software_rate_limit }}
      --ustat-profiles "{{ benchmark_ustat_profiles }}"
      --warp-binary {{ start_dss_benchmark_dest_dir }}/warp
      --access-key {{ minio_access_key }}
      --secret-key "{{ minio_secret_key }}"
      --output-dir {{ dss_log_dir }}
      --duration {{ benchmark_duration }}
      --concurrent {{ benchmark_concurrent }}
      --cap {{ benchmark_cap }}
      --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
      --ustat-binary-path {{ start_dss_benchmark_dest_dir }}/ustat
      --client-start-port {{ benchmark_client_start_port }}
    dest: "{{ start_dss_benchmark_dest_dir }}/scripts/dss_benchmark.sh"
    mode: 0755
  run_once: true
  when: inventory_hostname in groups['clients']
  become: true

- name: Check if benchmark data needs to be re-generated
  command: "{{ check_bucket_command }}"
  changed_when: false
  failed_when: false
  loop: "{{ check_bucket_commands }}"
  loop_control:
    loop_var: check_bucket_command
  register: check_bucket_results
  run_once: true

- name: Prepare and execute benchmark
  block:
    - name: Execute generate on master client
      shell: >
        set -o pipefail &&
        {{ start_dss_benchmark_dest_dir }}/scripts/dss_benchmark_generate.sh
        | tee -a {{ dss_log_dir }}/nkv-benchmark-generate.log
      run_once: true
      register: bench_generate
      no_log: true
      vars:
        check_buckets_rc_list: "{{ check_bucket_results.results | map(attribute='rc') | list | unique | join(',') }}"
      when:
        - inventory_hostname in groups['clients']
        - check_buckets_rc_list != '0' or
          cluster_json.changed or
          image_json.changed
      become: true

    - name: Start Compaction
      include_role:
        name: start_compaction
      when:
        - inventory_hostname in groups['servers']
        - dss_target_mode is search('kv_block')

    - name: Enable ustat
      lineinfile:
        path: "{{ start_dss_benchmark_conf_file }}"
        regexp: '^    "nkv_need_path_stat":'
        line: '    "nkv_need_path_stat": 1,'
      when: inventory_hostname in groups['servers']
      become: true

    - name: Execute benchmark on master client
      shell: >
        set -o pipefail &&
        {{ start_dss_benchmark_dest_dir }}/scripts/dss_benchmark.sh
        | tee -a {{ dss_log_dir }}/nkv-benchmark.log
      run_once: true
      register: bench_benchmark
      no_log: true
      when: inventory_hostname in groups['clients']
      become: true

  rescue:
    - name: Terminate failed benchmark
      command: >
        python3
        {{ start_dss_benchmark_dest_dir }}/scripts/bench.py
        terminate
        --cluster-config {{ start_dss_benchmark_dest_dir }}/cluster.json
      run_once: true
      when: inventory_hostname in groups['clients']
      become: true

    - name: Remove packet pacing from servers
      include_role:
        name: remove_packet_pacing
      when: inventory_hostname in groups['servers']

    - name: Benchmark Generate Failed
      fail:
        msg: |
          -- bench.py generate command --
          {{ bench_generate.cmd }}
          -- generate log --
          {{ bench_generate.stderr }}
      when:
        - bench_generate.failed is defined
        - bench_generate.failed
        - inventory_hostname in groups['clients']
      run_once: true

    - name: Benchmark Failed
      fail:
        msg: |
          -- bench.py benchmark command --
          {{ bench_benchmark.cmd }}
          -- benchmark log --
          {{ bench_benchmark.stderr }}
      when:
        - bench_benchmark.failed is defined
        - bench_benchmark.failed
        - inventory_hostname in groups['clients']
      run_once: true

  always:
    - name: Disable ustat
      lineinfile:
        path: "{{ start_dss_benchmark_conf_file }}"
        regexp: '^    "nkv_need_path_stat":'
        line: '    "nkv_need_path_stat": 0,'
      when: inventory_hostname in groups['servers']
      become: true
