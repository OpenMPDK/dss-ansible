#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Install DSS Agent runtime dependencies
  package:
    name: "{{ item }}"
    state: present
  loop:
    - python-pip
    - fping
    - etcd3
  when: ansible_os_family == 'RedHat' and inventory_hostname in groups['servers']
  become: true

- name: Remove existing staging directory
  file:
    name: "{{ item }}"
    state: absent
  loop:
    - "{{ start_dss_agent_temp_dir }}"
  become: true

- name: Create RPM staging directory
  file:
    state: directory
    path: "{{ item }}"
    mode: 0755
  loop:
    - "{{ start_dss_agent_temp_dir }}"

- name: Copy DSS Agent RPM
  copy:
    src: "{{ agent_rpm_file }}"
    dest: "{{ start_dss_agent_temp_dir }}"
    mode: 0755

- name: Install DSS Agent RPM
  yum:
    name: "{{ start_dss_agent_temp_dir }}/{{ agent_rpm_file | basename }}"
  register: agent_rpm_status
  failed_when: >
    'scriptlet failure' in agent_rpm_status.msg or
    'the control process exited with error code' in agent_rpm_status.msg
  become: true

- name: Check that target services are running
  service:
    name: "{{ item }}"
  register: service_status
  failed_when: service_status.status.ActiveState != "active"
  loop:
    - nvmf_tgt
    - kv_cli

- name: Copy python script to remote location
  template:
    src: subsystem_store.py
    dest: "{{ dss_subsystem_script_temp_file }}"
    mode: 0755
  when: agent_rpm_status.changed

- name: Wait for agent to gather all data on Target
  # May need to tune this
  wait_for: timeout=70
  when: agent_rpm_status.changed

- name: Creating subsystem based on CONFIG file.
  command: "python {{ dss_subsystem_script_temp_file }}"
  register: subsys_store
  failed_when: false
  no_log: true
  when: agent_rpm_status.changed
  become: true

- name: Check status of subsystem configure script
  fail:
    msg: "Error in configuring subsystem. Check {{ start_dss_agent_subsystem_log }}"
  when:
    - subsys_store is not skipped
    - subsys_store.rc != 0
