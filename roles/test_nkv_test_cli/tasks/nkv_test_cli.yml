# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Set nkv_test_cli_objects default - vm
  ansible.builtin.set_fact:
    nkv_test_cli_objects: "{{ nkv_test_cli_objects | d(nkv_test_cli_vm_objects_vm) }}"
  when: ansible_virtualization_role == 'guest'

- name: Set nkv_test_cli_objects default - physical
  ansible.builtin.set_fact:
    nkv_test_cli_objects: "{{ nkv_test_cli_objects | d(nkv_test_cli_objects_phys) }}"
  when: ansible_virtualization_role != 'guest'

- name: Execute nkv_test_cli command
  ansible.builtin.shell: "{{ nkv_test_cli_command | regex_replace('[\\r\\n\\t]+','') }}"
  args:
    chdir: "{{ nkv_sdk_bin_dir }}"
  loop: "{{ rocev2_numa_prefix_list }}"
  loop_control:
    loop_var: vlan
    label: "{{ nkv_test_cli_command | regex_replace('[\\r\\n\\t]+','') }}"
    extended: true
  vars:
    nkv_test_cli_command: >-
      numactl -N {{ vlan.numa }} -m {{ vlan.numa }}
      {{ nkv_sdk_bin_dir }}/nkv_test_cli
      -c {{ nkv_sdk_conf_dir }}/nkv_config_{{ vlan.ip }}.json
      -i {{ inventory_hostname }}
      -p {{ nkv_test_cli_port }}
      -b {{ nkv_test_cli_prefix }}/host{{ host_id }}/test{{ ansible_loop.index0 }}/
      -o {{ operation }}
      {% if operation != '4' -%}
        -t {{ nkv_test_cli_threads }}
        -k {{ nkv_test_cli_keysize }}
        -v {{ nkv_test_cli_valsize }}
        -n {{ nkv_test_cli_objects }}
      {% endif %}
      {% if nkv_test_cli_integrity | bool -%}
        -m 1
      {% endif %}
      {% if nkv_test_cli_mixed_io | bool -%}
        -d 1
      {% endif %}
      {% if nkv_test_cli_simulate_minio | bool -%}
        -g 1
      {% endif %}
      2>&1 | tee -a {{ dss_log_dir }}/nkv_test_cli-test{{ ansible_loop.index0 }}.log
  async: "{{ nkv_test_cli_async_timeout }}"
  poll: 0
  register: nkv_test_cli_async
  become: true
  tags:
    - skip_ansible_lint

- name: Check async nkv_test_cli command
  ansible.builtin.async_status:
    jid: "{{ async_task.ansible_job_id }}"
  register: async_results
  until: async_results.finished
  retries: "{{ (nkv_test_cli_async_timeout / nkv_test_cli_async_retry_delay) | int }}"
  delay: "{{ nkv_test_cli_async_retry_delay }}"
  loop: "{{ nkv_test_cli_async.results }}"
  loop_control:
    loop_var: async_task
    label: "{{ async_task.vlan.ip }}"
  become: true

- name: Assert async nkv_test_cli completion
  ansible.builtin.assert:
    that: async_result.finished != 0
    fail_msg: "nkv_test_cli did not complete in time"
    quiet: true
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.cmd | regex_replace('[\\r\\n\\t]+','') }}"

- name: Check nkv_test_cli output for errors
  ansible.builtin.debug:
    msg: "Checking for errors in nkv_test_cli output..."
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.cmd | regex_replace('[\\r\\n\\t]+','') }}"
  failed_when: >-
    async_result.stdout is search('Container Path down') or
    async_result.stdout is search('In simulated minio mode, number of drives should be at least 4') or
    async_result.stdout is search('Lock tuple failed with error') or
    async_result.stdout is search('NKV lock KVP call failed') or
    async_result.stdout is search('NKV lock operation failed') or
    async_result.stdout is search('NKV open failed') or
    async_result.stdout is search('NKV RDD chunked Get KVP call failed') or
    async_result.stdout is search('NKV RDD Retrieve KVP call failed') or
    async_result.stdout is search('NKV Retrieve KVP call failed') or
    async_result.stdout is search('NKV Store KVP call failed') or
    async_result.stdout is search('NKV Store KVP checksum call failed') or
    async_result.stdout is search('NKV store operation failed') or
    async_result.stdout is search('Opening path failed') or
    async_result.stdout is search('Path open failed') or
    async_result.stdout is search('store tuple failed with error') or
    async_result.stdout is search('Unsupported operation provided')

- name: Initialize throughput vars
  ansible.builtin.set_fact:
    throughput: 0
    combined_throughput: 0

- name: Set throughput
  ansible.builtin.set_fact:
    throughput: "{{ (throughput | float) + (async_result.stdout | regex_search(nkv_re, '\\1') | first | float / 1000) }}"
  vars:
    nkv_re: >-
      Throughput = ([^ ]+) MB/sec
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.async_task.vlan.ip }}"
  when: async_result.stdout | regex_search(nkv_re, '\\1')

- name: Set combined_throughput
  ansible.builtin.set_fact:
    combined_throughput: "{{ (combined_throughput | float) + (hostvars[host].throughput | float) }}"
  loop: "{{ host_hostnames }}"
  loop_control:
    loop_var: host
  run_once: true

- name: Assert total_num_keys for list operation
  ansible.builtin.assert:
    that: expected_total_num_keys | int == async_result.stdout | regex_search(nkv_re, '\\1') | first | int
    fail_msg: "Expected {{ expected_total_num_keys }} - found {{ async_result.stdout | regex_search(nkv_re, '\\1') | first | int }}"
    quiet: true
  vars:
    nkv_re: >-
      total_num_keys = ([^ \r\n]+)
    expected_total_num_keys: "{{ assert_num_keys | d(nkv_test_cli_threads | int * nkv_test_cli_objects | int) }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result
    label: "{{ async_result.async_task.vlan.ip }}"
  when:
    - operation == '4'
    - async_result.stdout | regex_search(nkv_re, '\\1')
