---

- name: Stat DSS Target path
  stat:
    path: "{{ start_dss_target_dest_dir }}"
  register: dss_target_path

- name: Assert DSS Target path exists
  assert:
    that: dss_target_path.stat.exists
    fail_msg: DSS Target is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Stat nvmf.in.conf
  stat:
    path: "{{ dss_target_conf_dir }}/nvmf.in.conf"
  register: nvmf_in_conf

- name: Stat dss_target.out
  stat:
    path: "{{ start_dss_target_dest_dir }}/bin/dss_target.out"
  register: dss_target_out

- name: Get spdk status
  command: ./setup.sh status
  changed_when: false
  args:
    chdir: "{{ start_dss_target_dest_dir }}/scripts"
  register: spdk_status
  become: true

- name: Run dss_target.py script
  include_tasks: dss_target.yml
  when: >
    not nvmf_in_conf.stat.exists or
    not dss_target_out.stat.exists or
    (spdk_status.stdout is not search('uio_pci_generic')) and (spdk_status.stdout is not search('vfio-pci'))

- name: Create blobfs.mkfs.in.conf
  shell: >
    sed -n '/^\[Nvme\]$/,$p' {{ dss_target_conf_dir }}/nvmf.in.conf |
    sed '/\[Subsystem/Q'
    > {{ dss_target_conf_dir }}/blobfs.mkfs.in.conf
  args:
    creates: "{{ dss_target_conf_dir }}/blobfs.mkfs.in.conf"
    warn: false
  register: create_blobfs_conf
  become: true

- name: Read disk serial numbers from blobfs.mkfs.in.conf
  command: |
    grep -oP 'traddr[^ ]+ "\K[^"]+' {{ dss_target_conf_dir }}/blobfs.mkfs.in.conf
  changed_when: false
  failed_when: false
  register: disk_serial_numbers

- name: Remove blobfs.mkfs.in.conf if empty
  file:
    path: "{{ dss_target_conf_dir }}/blobfs.mkfs.in.conf"
    state: absent
  become: true
  when: disk_serial_numbers.stdout_lines | length <= 2

- name: Assert that disk serial numbers are found
  assert:
    that: disk_serial_numbers.stdout_lines | length >= 1
    msg: |
      Disk serial numbers not found in blobfs.mkfs.in.conf for firmware {{ target_fw_version }}
      Please verify that KV / block SSDs are present on system.
      Please verify that 'target_fw_version' var matches desired firmware.

- name: Create BlobFS filesystem for KV-Block
  include_tasks: format_blobfs.yml
  when: dss_target_mode is search('kv_block')

- name: Read dss_target.out
  command: "cat {{ start_dss_target_dest_dir }}/bin/dss_target.out"
  become: true
  changed_when: false
  register: dss_target_out

- name: Get nvmf_tgt command from dss_target.py script
  set_fact:
    nvmf_tgt_cmd: "{{ dss_target_out.stdout | regex_search(nvmf_tgt_re, '\\1') | first }}"
  vars:
    nvmf_tgt_re: 'Execute the following command to start the target application: (.+)'

- name: Set hardcoded nvmf_tgt command if more than 128 cores
  set_fact:
    nvmf_tgt_cmd: "./nvmf_tgt -c {{ dss_target_conf_dir }}/nvmf.in.conf -r /var/run/spdk.sock -m 0xffffffff0000000000000000ffffffff"
  when: ansible_processor_vcpus > 128

- name: Find running target process
  command: "pgrep reactor_"
  register: nvmf_ps
  changed_when: false
  failed_when: false

- name: Start DSS target process
  shell: source {{ start_dss_target_gcc_setenv }} && nohup {{ nvmf_tgt_cmd }} > {{ start_dss_target_log_dir }}/nkv-target.log 2>&1 &
  args:
    chdir: "{{ start_dss_target_dest_dir }}/bin"
  when: nvmf_ps.rc != 0
  become: true

- name: Wait for subsystems to initialize
  command: "cat {{ start_dss_target_log_dir }}/nkv-target.log"
  changed_when: false
  failed_when: false
  register: subsystem_initialized
  vars:
    search_string: Initialized subsystem
  become: true
  until:
    - subsystem_initialized.stdout is search(search_string)
    - subsystem_initialized.stdout | regex_findall(search_string) | length == num_subsystems
  retries: 60
  delay: 5

- name: Assert subsystems initialized
  assert:
    that: not subsystem_initialized.failed
    fail_msg: |
      One or more subsystems failed to initialize.

      ***
      {{ start_dss_target_log_dir }}/nkv-target.log:
      {{ subsystem_initialized.stdout }}
