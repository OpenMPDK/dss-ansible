---

- name: Stat DSS Target path
  stat:
    path: "{{ start_dss_target_dest_dir }}"
  register: dss_target_path

- name: Assert DSS Target path exists
  assert:
    that: dss_target_path.stat.exists
    fail_msg: DSS Target is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Stat nvmf.in.conf
  stat:
    path: "{{ start_dss_target_dest_dir }}/bin/nvmf.in.conf"
  register: nvmf_ini_conf

- name: Stat dss_target.out
  stat:
    path: "{{ start_dss_target_dest_dir }}/bin/dss_target.out"
  register: dss_target_out

- name: Get spdk status
  command: ./setup.sh status
  changed_when: false
  args:
    chdir: "{{ start_dss_target_dest_dir }}/scripts"
  register: spdk_status
  become: true

- name: Run dss_target.py script
  include_tasks: dss_target.yml
  when: >
    not nvmf_ini_conf.stat.exists or
    not dss_target_out.stat.exists or
    spdk_status.stdout is not search('uio_pci_generic')

- name: Read dss_target.out
  command: "cat {{ start_dss_target_dest_dir }}/bin/dss_target.out"
  become: true
  changed_when: false
  register: dss_target_out

- name: Get nvmf_tgt command from dss_target.py script
  set_fact:
    nvmf_tgt_cmd: "{{ dss_target_out.stdout | regex_search(nvmf_tgt_re, '\\1') | first }}"
  vars:
    nvmf_tgt_re: 'Execute the following command to start the target application: (.+)'

- name: Set hardcoded nvmf_tgt command if more than 128 cores
  set_fact:
    nvmf_tgt_cmd: "./nvmf_tgt -c nvmf.in.conf -r /var/run/spdk.sock -m 0xffffffff0000000000000000ffffffff"
  when: ansible_processor_vcpus > 128

- name: Find running target process
  command: "pgrep -ax reactor_0"
  register: nvmf_ps
  changed_when: false
  failed_when: false

- name: Start DSS target process
  shell: nohup {{ nvmf_tgt_cmd }} > {{ start_dss_target_log_dir }}/nkv-target.log 2>&1 &
  args:
    chdir: "{{ start_dss_target_dest_dir }}/bin"
  when: nvmf_ps.rc != 0
  become: true
