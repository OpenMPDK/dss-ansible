# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Stat DSS Target path
  stat:
    path: "{{ target_dir }}"
  register: dss_target_path

- name: Assert DSS Target path exists
  assert:
    that: dss_target_path.stat.exists
    fail_msg: DSS Target is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Stat nvmf.in.conf
  stat:
    path: "{{ target_conf_file }}"
  register: nvmf_in_conf

- name: Stat dss_target.out
  stat:
    path: "{{ target_dir }}/bin/dss_target.out"
  register: dss_target_out

- name: Get spdk status
  command: ./setup.sh status
  changed_when: false
  args:
    chdir: "{{ target_dir }}/scripts"
  register: spdk_status
  become: true

- name: Run dss_target.py script
  include_tasks: dss_target.yml

- name: Find NVMe PCIe addresses in nvmf.in.conf
  command: >
    grep 'TransportID "trtype:PCIe traddr' {{ target_conf_file }}
  register: pcie_addrs
  changed_when: false
  failed_when: false

- name: Assert PCIe addresses found
  assert:
    that: pcie_addrs.stdout_lines | length > 0
    msg: |
      Disk serial numbers not found in nvmf.in.conf for firmware {{ target_fw_version }}
      Please verify that 'target_fw_version' var matches desired firmware.

- name: Format BlobFS
  include_role:
    name: format_blobfs
  when: dss_target_mode is search('kv_block')

- name: Read dss_target.out
  command: "cat {{ target_dir }}/bin/dss_target.out"
  become: true
  changed_when: false
  register: dss_target_out

- name: Get nvmf_tgt command from dss_target.py script
  set_fact:
    nvmf_tgt_cmd: "{{ dss_target_out.stdout | regex_search(nvmf_tgt_re, '\\1') | first }}"
  vars:
    nvmf_tgt_re: 'Execute the following command to start the target application: (.+)'

- name: Insert nohup into nvmf_tgt_cmd var
  set_fact:
    nvmf_tgt_cmd: "{{ nvmf_tgt_cmd | regex_replace(nvmf_tgt_re, 'nohup \\1') }}"
  vars:
    nvmf_tgt_re: '(\/[^ ]+nvmf_tgt)'

- name: Set nvmf_tgt command if custom_coremask is defined
  set_fact:
    nvmf_tgt_cmd: >-
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:{{ target_lib_dir }}
      nohup
      {{ target_dir }}/bin/nvmf_tgt
      -c {{ target_conf_file }}
      -r /var/run/spdk.sock
      -m {{ custom_coremask }}
  when: custom_coremask is defined

- name: Find running target process
  command: "pgrep reactor_"
  register: nvmf_ps
  changed_when: false
  failed_when: false

- name: Stat XRT script
  stat:
    path: "{{ xrt_setenv }}"
  register: xrt_setenv_script

- name: Start DSS target process
  shell: >
    {% if xrt_setenv_script.stat.exists %}
    source {{ xrt_setenv }} &&
    {% endif %}
    source {{ gcc_setenv }} &&
    {{ nvmf_tgt_cmd }} > {{ dss_log_dir }}/nkv-target.log 2>&1 &
  args:
    chdir: "{{ target_dir }}/bin"
  when: nvmf_ps.rc != 0
  become: true

- name: Wait for subsystems to initialize
  command: "cat {{ dss_log_dir }}/nkv-target.log"
  changed_when: false
  failed_when: false
  register: subsystem_initialized
  vars:
    search_string: Initialized subsystem
  become: true
  until:
    - subsystem_initialized.stdout is search(search_string)
    - subsystem_initialized.stdout | regex_findall(search_string) | length == num_subsystems
  retries: 60
  delay: 5

- name: Assert subsystems initialized
  assert:
    that: not subsystem_initialized.failed
    fail_msg: |
      One or more subsystems failed to initialize.

      ***
      {{ dss_log_dir }}/nkv-target.log:
      {{ subsystem_initialized.stdout }}
