---

- name: Set hugepages
  include_tasks: set_num_hugepages.yml

- name: Identify kvssd firmware
  include_role:
    name: identify_kvssd_firmware
  when: target_fw_version is not defined

- name: Get RoCEv2 IP Address
  include_role:
    name: get_vlan_ips
  vars:
    vlan_list: "{{ rocev2_vlans }}"
  when: rocev2_ip_list is not defined

- name: Set rocev2_ip_list var if auto-discovered
  set_fact:
    rocev2_ip_list: "{{ vlan_ip_list }}"
  when: rocev2_ip_list is not defined

- name: Assert that at least one RoCEv2 IP is present
  assert:
    that:
      - rocev2_ip_list is defined
      - rocev2_ip_list | length > 0
    fail_msg: "No RoCEv2 IPs configured on any Mellanox adapter. Please configure at least one IP to deploy target."
    success_msg: "RoCEv2 IP(s) detected."

- name: Create dss_target_config.sh script
  copy:
    content: >
      ./dss_target.py configure
      --config_file {{ dss_target_conf_file }}
      --ip_addresses {% for ip in rocev2_ip_list %}{{ ip }}{% if not loop.last %} {% endif %}{% endfor %}
      --kv_firmware {{ target_fw_version }}
      --kv_ssc {{ num_subsystems }}
      --two_mb_hugepages {{ num_2mb_hugepages }}
      --one_gb_hugepages {{ num_1gb_hugepages }}
      --mode {{ dss_target_mode }}
      --tcp {{ dss_target_enable_tcp }}
      --rdma {{ dss_target_enable_rdma }}
    dest: "{{ start_dss_target_dest_dir }}/bin/dss_target_config.sh"
    mode: 0755
  become: true

- name: Configure target with dss_target_config.sh script
  command: sh ./dss_target_config.sh
  args:
    chdir: "{{ start_dss_target_dest_dir }}/bin"
  register: dss_target_configure
  become: true

- name: Assert dss_target.py success
  assert:
    that:
      - "'drive setup to system is done' in dss_target_configure.stdout"
      - "'hugepage setup is done' in dss_target_configure.stdout"
      - "'drive setup to userspace is done' in dss_target_configure.stdout"
    success_msg: "dss_target.py successfully configured target"
    fail_msg: "dss_target.py failed to configure target"
  when: dss_target_configure.changed

- name: Save output of dss_target.py
  copy:
    content: "{{ dss_target_configure.stdout }}"
    dest: "{{ start_dss_target_dest_dir }}/bin/dss_target.out"
    mode: 0644
  become: true
