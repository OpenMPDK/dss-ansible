# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Set ib_read_bw_port and cumulative_bw vars
  ansible.builtin.set_fact:
    cumulative_bw: 0
    ib_read_bw_port: |-
      {%- for host in ansible_play_hosts -%}
        {%- if inventory_hostname == host -%}
          {{ ib_read_bw_starting_port + loop.index0 }}
        {%- endif -%}
      {%- endfor -%}

- name: Set server linkspeed
  ansible.builtin.set_fact:
    server_linkspeed: "{{ lookup('vars', server_ans_netdev).speed }}"
  vars:
    server_ans_netdev: "ansible_{{ server_netdev | replace('-', '_') }}"
  delegate_to: "{{ server_hostname }}"
  run_once: true

- name: Set client_ib_device var
  ansible.builtin.set_fact:
    client_ib_device: "{{ ib_devices | selectattr('vlan_index', 'equalto', server_vlan_index) | list | first }}"

- name: Set ib_read_bw_server_command and ib_read_bw_client_command vars
  ansible.builtin.set_fact:
    ib_read_bw_server_command: >-
      ib_read_bw
      --ib-dev={{ server_ibdev }}
      --gid-index={{ server_gid_index }}
      --qp={{ ib_read_bw_qp }}
      --size={{ ib_read_bw_size }}
      --sl={{ ib_read_bw_sl }}
      --port={{ ib_read_bw_port }}
      --report_gbits
    ib_read_bw_client_command: >-
      ib_read_bw
      {{ server_ip_address }}
      --ib-dev={{ client_ib_device.ibdev }}
      --gid-index={{ client_ib_device.gid_index }}
      --qp={{ ib_read_bw_qp }}
      --size={{ ib_read_bw_size }}
      --duration={{ ib_read_bw_duration }}
      --sl={{ ib_read_bw_sl }}
      --port={{ ib_read_bw_port }}
      --report_gbits
  when: inventory_hostname != server_hostname

- name: Print ib_read_bw server command
  ansible.builtin.debug:
    var: ib_read_bw_server_command
  delegate_to: "{{ server_hostname }}"
  when: inventory_hostname != server_hostname

- name: Print ib_read_bw client command
  ansible.builtin.debug:
    var: ib_read_bw_client_command
  when: inventory_hostname != server_hostname

- name: Execute ib_read_bw server from {{ server_hostname }} - {{ server_ip_address }}
  ansible.builtin.command: "{{ ib_read_bw_server_command }}"
  changed_when: false
  async: "{{ ib_read_bw_duration | int + 10 }}"
  poll: 0
  become: true
  delegate_to: "{{ server_hostname }}"
  when: inventory_hostname != server_hostname

- name: Execute ib_read_bw client to {{ server_hostname }} - {{ server_ip_address }}, {{ ib_read_bw_duration }} seconds
  ansible.builtin.command: "{{ ib_read_bw_client_command }}"
  changed_when: false
  register: ib_results
  become: true
  when: inventory_hostname != server_hostname

- name: Set cumulative_bw var
  ansible.builtin.set_fact:
    cumulative_bw: "{{ (cumulative_bw | float) + (bw_avg | float) }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: client_hostname
  vars:
    result_regex: '([\d]+)\s+([\d]+)\s+([\d.]+)\s+([\d.]+)\s+([\d.]+)'
    bw_avg: "{{ hostvars[client_hostname].ib_results.stdout | regex_search(result_regex, '\\4') | first }}"
  run_once: true
  when: client_hostname != server_hostname

- name: Collect ib_read_bw results for server {{ server_hostname }} - {{ server_ip_address }}
  ansible.builtin.set_fact:
    combined_ib_results: "{{ combined_ib_results | default([]) +
                          [{'bw_avg': '%0.2f' % cumulative_bw | float,
                            'server_hostname': server_hostname,
                            'server_ip': server_ip_address,
                            'server_linkspeed': server_linkspeed | int,
                            'vlan_index': server_vlan_index | int}] }}"
  vars:
  run_once: true
