# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, 
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Assert onyx group is defined
  assert:
    that: "'onyx' in groups"
    msg: No hosts defined in onyx group. Cannot automatically configure VLANs.

- name: Assert VLAN ID lists are defined
  assert:
    that:
      - tcp_vlan_id_list is defined
      - rocev2_vlan_id_list is defined
    msg: "VLAN ID list var is not defined"

- name: Set interface_switch_map_no_numa var
  set_fact:
    interface_switch_map_no_numa: >-
      {{ interface_switch_map_no_numa | default([]) }}
      {%- for switch in groups['onyx'] -%}
        {%- for onyx_interface in hostvars[switch]['lldp_interfaces'] -%}
          {%- for interface_name in ansible_interfaces | sort -%}
            {%- set host_interface = hostvars[inventory_hostname]['ansible_' + interface_name] -%}
            {%- if (host_interface.macaddress is defined) and (host_interface.pciid is defined) -%}
              {%- if host_interface.macaddress == onyx_interface.port_id -%}
                + {{
                  [{
                    'local_interface': interface_name,
                    'switch_name': switch,
                    'switch_port': onyx_interface.local_interface,
                    'pciid': host_interface.pciid
                  }]
                }}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}

- name: Assert links found
  assert:
    that: interface_switch_map_no_numa | length > 0
    msg: No links found for host on any switch. Check that NICs are connected to switch and that LLDPD is running.

- name: Get NUMA
  command: "cat /sys/class/net/{{ item.local_interface }}/device/numa_node"
  changed_when: false
  loop: "{{ interface_switch_map_no_numa }}"
  loop_control:
    label: "{{ item.local_interface }}"
  register: numa_node

- name: Set interface_switch_map with NUMA
  set_fact:
    interface_switch_map: "{{ interface_switch_map | default([]) }} +
      [
        {
          'local_interface': '{{ item.item.local_interface }}',
          'pciid': '{{ item.item.pciid }}',
          'switch_name': '{{ item.item.switch_name }}',
          'switch_port': '{{ item.item.switch_port }}',
          'numa': {{ item.stdout }}
        }
      ]"
  loop: "{{ numa_node.results }}"
  loop_control:
    label: "{{ item.item.local_interface }}"

- name: Assert number of links is greater than or equal to number of VLANs on switch
  assert:
    that: (num_links | int) * (num_vlans_per_port | int) >= num_vlans | int
    fail_msg: >
      Number of links times vlans_per_port: {{ (num_links | int) * (num_vlans_per_port | int) }}
      must be greater than or equal to number of vlans: {{ num_vlans }}
    success_msg: >
      Number of links times vlans_per_port: {{ (num_links | int) * (num_vlans_per_port | int) }}
      is greater than or equal to number of vlans: {{ num_vlans }}"
  loop: "{{ groups['onyx'] }}"
  loop_control:
    loop_var: switch
  when: host_vlan_id_list | intersect(switch_vlan_id_list) | length > 0
  vars:
    host_vlan_id_list: "{{ (tcp_vlan_id_list | list) | union(rocev2_vlan_id_list | list) }}"
    switch_vlan_id_list: "{{ hostvars[switch]['tcp_vlan_id_list'] | union(hostvars[switch]['rocev2_vlan_id_list']) }}"
    num_vlans: "{{ host_vlan_id_list | intersect(switch_vlan_id_list) | count }}"
    num_links: "{{ interface_switch_map | selectattr('switch_name', 'equalto', switch) | list | count }}"

- name: Set interface_switch_vlan_map
  set_fact:
    interface_switch_vlan_map: |
      {{ interface_switch_vlan_map | default([]) }}
      {%- for switch in groups['onyx'] -%}
        {%- set tcp_vlan_intersect_list = hostvars[switch]['tcp_vlan_id_list'] | intersect(tcp_vlan_id_list) -%}
        {%- set rocev2_vlan_intersect_list = hostvars[switch]['rocev2_vlan_id_list'] | intersect(rocev2_vlan_id_list) -%}
        {%- set num_tcp_vlans = tcp_vlan_intersect_list | length -%}
        {%- set num_rocev2_vlans = rocev2_vlan_intersect_list | length -%}
        {%- set max_vlan_index = [num_tcp_vlans, num_rocev2_vlans] | max -%}
        {%- set interleaved_vlan_list = [] -%}
        {%- for vlan_num in range(max_vlan_index) -%}
          {%- if rocev2_vlan_intersect_list[vlan_num] is defined -%}
            {%- if interleaved_vlan_list.append(rocev2_vlan_intersect_list[vlan_num]) %}{% endif -%}
          {%- endif -%}
          {%- if tcp_vlan_intersect_list[vlan_num] is defined -%}
            {%- if interleaved_vlan_list.append(tcp_vlan_intersect_list[vlan_num]) %}{% endif -%}
          {%- endif -%}
        {%- endfor -%}
        {%- set link_count = [] -%}
        {%- for link in interface_switch_map | selectattr('switch_name', 'equalto', switch) | list | sort(attribute='pciid') | sort(attribute='numa') -%}
          {%- for sub_port in range(num_vlans_per_port) -%}
            {%- if interleaved_vlan_list[link_count | length] is defined -%}
              + {{
                [{
                  'local_interface': link.local_interface,
                  'switch_name': switch,
                  'switch_port': link.switch_port,
                  'vlan_id': interleaved_vlan_list[link_count | length],
                  'numa': link.numa
                }]
              }}
              {%- set link_count = link_count.append(1) -%}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      {%- endfor -%}

- name: Set NUMA-sorted combined_interface_switch_vlan_map
  set_fact:
    combined_interface_switch_vlan_map: "{{ combined_interface_switch_vlan_map | default([]) }} + {{ hostvars[host].interface_switch_vlan_map }}"
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: host
  run_once: true
