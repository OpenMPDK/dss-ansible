#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Create local coredump dir
  file:
    path: "{{ local_coredump_dir }}"
    state: directory
    mode: 0755
  delegate_to: localhost
  run_once: true

- name: Create host dirs if coredump_only is false
  file:
    path: "{{ local_coredump_dir }}/{{ inventory_hostname }}"
    state: directory
    mode: 0755
  delegate_to: localhost
  when: not coredump_only

- name: Check for coredumps
  find:
    path: "{{ coredump_dir }}"
    patterns: 'core-reactor_*.gz'
  register: coredumps

- name: Fetch coredumps
  fetch:
    src: "{{ item.path }}"
    dest: "{{ local_coredump_dir }}"
  loop: "{{ coredumps.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: coredumps.matched > 0

- name: Collect dmesg
  command: dmesg -T
  register: dmesg
  changed_when: false
  when: coredumps.matched > 0 or not coredump_only

- name: Fetch dmesg
  copy:
    dest: "{{ local_coredump_dir }}/{{ inventory_hostname }}/dmesg"
    content: "{{ dmesg.stdout }}"
    mode: 0755
  delegate_to: localhost
  when: coredumps.matched > 0 or not coredump_only

- name: Fetch target log
  fetch:
    src: "{{ dss_log_dir }}/nkv-target.log"
    dest: "{{ local_coredump_dir }}"
  when: coredumps.matched > 0 or not coredump_only

- name: Find minio logs
  find:
    paths: "{{ dss_log_dir }}"
    recurse: false
    patterns: "nkv-minio*.log"
  register: minio_logs

- name: Fetch minio logs
  fetch:
    src: "{{ item.path }}"
    dest: "{{ local_coredump_dir }}"
  loop: "{{ minio_logs.files }}"
  loop_control:
    label: "{{ item.path }}"
  when: coredumps.matched > 0 or not coredump_only

- name: Create support bundle tarball
  archive:
    path: "{{ local_coredump_dir }}/{{ inventory_hostname }}"
    dest: "{{ local_coredump_dir }}/{{ ansible_date_time.epoch }}-{{ inventory_hostname_short }}-{{ coredump_suffix_name }}.tgz"
    mode: 0755
  delegate_to: localhost
  when: coredumps.matched > 0 or not coredump_only

- name: Remove support bundle temp files
  file:
    path: "{{ local_coredump_dir }}/{{ inventory_hostname }}"
    state: absent
  delegate_to: localhost
  when: coredumps.matched > 0  or not coredump_only

- name: Remove coredumps
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ coredumps.files }}"
  loop_control:
    label: "{{ item.path }}"
  become: true
  when: coredumps.matched > 0
