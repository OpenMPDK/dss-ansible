#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Query ConnectX Devices (ibdev2netdev)
  command: ibdev2netdev -v
  changed_when: false
  register: mlx_list
  become: true

- name: Assert ConnectX devices are present
  assert:
    that: mlx_list.stdout_lines | length > 0
    fail_msg: "Found 0 ConnectX devices"
    success_msg: "Found {{ mlx_list.stdout_lines | length }} devices"

- name: Initialize vars
  set_fact:
    mellanox_devices: []
    mellanox_devices_numa: []
    mellanox_ports: []
    mlx_regex: '^(?:([\da-fA-F]+:[\da-fA-F]+:[\da-fA-F]+\.[\da-fA-F]+) )?(mlx[\d]_[\d]) (?:\([^)]+\))(?:.+ConnectX-(\d))?.+fw ([^ ]+).+ ==> ([^ ]+) \((Up|Down)\)'

- name: Assert ibdev2netdev results are parseable
  assert:
    that: mlx_list.stdout is regex(mlx_regex)
    msg: |
      Unable to parse output from ibdev2netdev.
      OFED is required for auto-discovered IPs.
      Configure tcp_ip_list / rocev2_ip_list in inventory if not using OFED.

- name: Create list of ConnectX device dict
  set_fact:
    mellanox_devices: "{{ mellanox_devices | default([]) +
                        [{'hw_addr': hw_addr,
                          'ibdev': ibdev_val,
                          'ConnectX': connectx_val | int,
                          'fw': fw_val,
                          'netdev': netdev_val,
                          'status': status_val }] }}"
  loop: "{{ mlx_list.stdout_lines }}"
  loop_control:
    label: "{{ ibdev_val }}"
  vars:
    hw_addr: "{{ item | regex_search(mlx_regex, '\\1') | first }}"
    ibdev_val: "{{ item | regex_search(mlx_regex, '\\2') | first }}"
    connectx_val: "{{ item | regex_search(mlx_regex, '\\3') | first }}"
    fw_val: "{{ item | regex_search(mlx_regex, '\\4') | first }}"
    netdev_val: "{{ item | regex_search(mlx_regex, '\\5') | first }}"
    status_val: "{{ item | regex_search(mlx_regex, '\\6') | first }}"

- name: Get NUMA for each adapter
  slurp:
    src: "/sys/class/net/{{ item.netdev }}/device/numa_node"
  loop: "{{ mellanox_devices }}"
  loop_control:
    label: "{{ item.ibdev }}"
  register: numas

- name: Set mellanox devices list with numa
  set_fact:
    mellanox_devices_numa: "{{ mellanox_devices_numa | default([]) +
                              [{'hw_addr': item.0.hw_addr,
                                'ibdev': item.0.ibdev,
                                'ConnectX': item.0.ConnectX | int,
                                'fw': item.0.fw,
                                'netdev': item.0.netdev,
                                'status': item.0.status,
                                'numa': item.1.content | b64decode | first | int }] }}"
  with_together:
    - "{{ mellanox_devices }}"
    - "{{ numas.results }}"
  loop_control:
    label: "{{ item.0.ibdev }}"

- name: Set sorted list of ConnectX ports
  set_fact:
    mellanox_ports: "{{ mellanox_devices_numa | sort(attribute='ibdev') | sort(attribute='hw_addr') | sort(attribute='numa') }}"
