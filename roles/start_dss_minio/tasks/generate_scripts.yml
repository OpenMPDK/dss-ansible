#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Get Mountpoints
  include_role:
    name: get_mountpoints

- name: Get numactl hardware information
  command: numactl --hardware
  changed_when: false
  register: numactl_hardware

- name: Set num_numa_nodes
  set_fact:
    num_numa_nodes: "{{ numactl_hardware.stdout | regex_search(numa_re, '\\1') | first | int }}"
  vars:
    numa_re: 'available: ([\d]+) nodes'

- name: Query up adapters
  shell: "ip address show"
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/usr/sbin"
  changed_when: false
  register: up_adapters

- name: Query NUMA for numactl string
  include_tasks: set_numa.yml
  loop: "{{ range(0, tcp_ip_list | length) | list }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
  vars:
    tcp_ip: "{{ tcp_ip_list[ansible_loop.index0] }}"

- name: Set adjacent_numa_list var
  set_fact:
    adjacent_numa_list: "{{ adjacent_numa_list | default([]) }} +
      {% if numa - 1 not in numa_list and numa - 1 >= 0 and (adjacent_numa_list is not defined or numa - 1 not in adjacent_numa_list) %}
        {{ [ numa - 1 ] }}
      {% elif numa + 1 not in numa_list and numa + 1 <= (num_numa_nodes | int) and (adjacent_numa_list is not defined or numa + 1 not in adjacent_numa_list) %}
        {{ [ numa + 1 ] }}
      {% else %}
        [ 'error' ]
      {% endif %}"
  loop: "{{ numa_list }}"
  loop_control:
    loop_var: numa

- name: Assert valid adjacent NUMA found
  assert:
    that: "'error' not in adjacent_numa_list"
    msg: |
      Network adapters are not in a valid NUMA configuration.
      Current NUMA configuration:
      {{ numa_list }}

- name: Assert distributed minio minimum mountpoints
  assert:
    that: (nvme_mountpoints | length /  tcp_ip_list | length) >= 4
  when: standalone_minio is not defined

- name: Assert standalone minio minimum mountpoints
  assert:
    that: nvme_mountpoints | length >= 4
  when: standalone_minio is defined

- name: Create minio scripts
  template:
    src: minio_startup.sh.j2
    dest: "{{ start_dss_minio_host_bin_dir }}/minio_startup_{{ tcp_ip }}.sh"
    mode: 0751
  become: true
  loop: "{{ range(0, tcp_ip_list | length) | list }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
  vars:
    numa_node: "{{ numa_list[ansible_loop.index0] }}"
    adjacent_numa: "{{ adjacent_numa_list[ansible_loop.index0] }}"
    tcp_ip: "{{ tcp_ip_list[ansible_loop.index0] }}"
    min_subsystem: "{{ min_subsystem_list[ansible_loop.index0] }}"
    my_range: "{{ subsys_range[ansible_loop.index0] }}"
