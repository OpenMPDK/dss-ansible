---

- name: Set TCP - RoCEv2 IP map
  set_fact:
    vlan_ip_map: "{{ vlan_ip_map | default([]) +
                  [{'tcp_ip': tcp_ip,
                    'rocev2_ip': rocev2_ip }] }}"
  with_together:
    - "{{ tcp_vlan_ip_list }}"
    - "{{ rocev2_vlan_ip_list }}"
  vars:
    tcp_ip: "{{ item.0 }}"
    rocev2_ip: "{{ item.1 }}"

- name: Set combined_vlan_ip_map
  set_fact:
    combined_vlan_ip_map: "{{ combined_vlan_ip_map | default([]) }} +
      [{ 'rocev2': [{% for host in ansible_play_hosts -%}
      '{{ hostvars[host].vlan_ip_map[ansible_loop.index0].rocev2_ip }}'
      {%- if not loop.last %}, {% endif %}{% endfor %}],
          'tcp': [{% for host in ansible_play_hosts -%}
      '{{ hostvars[host].vlan_ip_map[ansible_loop.index0].tcp_ip }}'
      {%- if not loop.last %}, {% endif %}{% endfor %}] }]"
  loop: "{{ range(0, vlan_ip_map | length) | list }}"
  loop_control:
    label: "{{ ansible_loop.index0 }}"
    extended: true
  run_once: true

- name: NVMe list subsystems
  command: nvme list-subsys
  changed_when: false
  register: nvme_subsys
  become: true

- name: Parse nvme list subsys
  set_fact:
    rocev2_devmap: "{{ rocev2_devmap | default([]) +
                    [{'dev': nvme_num,
                      'ip': rocev2_ip }] }}"
    msg: "{{ nvme_num }} - {{ rocev2_ip }}"
  loop: "{{ nvme_subsys.stdout_lines }}"
  loop_control:
    loop_var: nvme_line
  vars:
    nvme_regex: >-
      nvme(\d+) rdma traddr=([^ ]+)
    nvme_num: "{{ nvme_line | regex_search(nvme_regex, '\\1') | first }}"
    rocev2_ip: "{{ nvme_line | regex_search(nvme_regex, '\\2') | first }}"
  when: nvme_line is search('traddr')
  run_once: true

- name: Find min/max devmap
  set_fact:
    subsys_range: >-
      {% set dev_range = { 'min': 999, 'max': 0 } -%}
      {%- for subsys in rocev2_devmap -%}
        {%- if subsys.ip in vlan_pair.rocev2 -%}
          {%- if subsys.dev | int < dev_range.min | int %}{% if dev_range.update({ 'min': subsys.dev, 'max': dev_range.max }) %}{% endif %}{% endif -%}
          {%- if subsys.dev | int > dev_range.max | int %}{% if dev_range.update({ 'min': dev_range.min, 'max': subsys.dev }) %}{% endif %}{% endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ subsys_range | default([]) +
        [{'min': dev_range.min,
          'max': dev_range.max}] }}
  loop: "{{ combined_vlan_ip_map }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
    label: "{{ ansible_loop.index0 }}"
  run_once: true

- name: Get numactl hardware information
  command: numactl --hardware
  changed_when: false
  register: numactl_hardware

- name: Set num_numa_nodes
  set_fact:
    num_numa_nodes: "{{ numactl_hardware.stdout | regex_search(numa_re, '\\1') | first | int }}"
  vars:
    numa_re: 'available: ([\d]+) nodes'

- name: Query up adapters
  shell: "ip address show | grep 'state UP'"
  changed_when: false
  register: up_adapters

- name: Set numactl string and generate minio scripts
  include_tasks: set_numa_gen_script.yml
  loop: "{{ range(0, tcp_vlan_ip_list | length) | list }}"
  loop_control:
    loop_var: vlan_pair
    extended: true
  vars:
    tcp_ip: "{{ tcp_vlan_ip_list[ansible_loop.index0] }}"
