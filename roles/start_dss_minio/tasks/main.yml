---

- name: Stat DSS Minio path
  stat:
    path: "{{ start_dss_minio_dir }}"
  register: dss_minio_path

- name: Assert DSS Minio path exists
  assert:
    that: dss_minio_path.stat.exists
    fail_msg: DSS Minio is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Stat DSS Host path
  stat:
    path: "{{ start_dss_minio_host_bin_dir }}"
  register: dss_host_path

- name: Assert DSS Host path exists
  assert:
    that: dss_host_path.stat.exists
    fail_msg: DSS Host is not installed. Execute 'deploy_dss_software.yml' playbook first.

- name: Get all RoCEv2 IP Addresses
  include_role:
    name: get_vlan_ips
  vars:
    vlan_list: "{{ rocev2_vlans }}"
  when: rocev2_ip_list is not defined

- name: Set rocev2_ip_list and tcp_ip_list vars if IP's auto-discovered
  set_fact:
    rocev2_ip_list: "{{ vlan_ip_list }}"
  when: rocev2_ip_list is not defined

- name: Get all TCP IP Addresses
  include_role:
    name: get_vlan_ips
  vars:
    vlan_list: "{{ tcp_vlans }}"
  when: tcp_ip_list is not defined

- name: Set tcp_ip_list var
  set_fact:
    tcp_ip_list: "{{ vlan_ip_list }}"
  when: tcp_ip_list is not defined

- name: Stat minio startup scripts
  stat:
    path: "{{ start_dss_minio_host_bin_dir }}/minio_startup_{{ ip_address }}.sh"
  loop: "{{ tcp_ip_list }}"
  loop_control:
    loop_var: ip_address
  register: minio_script_stat

- name: Check for missing startup scripts
  set_fact:
    missing_script: true
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: host
  vars:
    script_exists: "{{ hostvars[host].minio_script_stat.results | map(attribute='stat.exists') | list }}"
  when: false in script_exists
  run_once: true

- name: Generate minio startup scripts
  include_tasks: generate_scripts.yml

- name: Check for running minio instances
  command: "pgrep -ax minio"
  register: minio_ps
  changed_when: false
  failed_when: false

- name: Start minio instances
  shell: >
    sleep 1 &&
    nohup ./minio_startup_{{ ip_address }}.sh >
    {{ start_dss_minio_log_dir }}/nkv-minio_{{ ip_address }}.log 2>&1 &
  args:
    chdir: "{{ start_dss_minio_host_bin_dir }}"
  loop: "{{ tcp_ip_list }}"
  loop_control:
    loop_var: ip_address
  vars:
    distributed_string: "server --address {{ ip_address }}:{{ minio_port }}"
  when: >
    (combined_vlan_ip_map | length > 1 and
    distributed_string not in minio_ps.stdout) or
    (combined_vlan_ip_map | length == 1 and
    'server' not in minio_ps.stdout)
  throttle: 1
  become: true

- name: Check for running minio instances post-start
  command: "pgrep -ax minio"
  register: post_minio_ps
  changed_when: false
  failed_when: false

- name: Assert distributed minio instances running
  assert:
    that: server_string in post_minio_ps.stdout
    fail_msg: Minio instance not running
    quiet: true
  loop: "{{ tcp_ip_list }}"
  loop_control:
    loop_var: ip_address
  vars:
    server_string: "server --address {{ ip_address }}:{{ minio_port }}"
  when: combined_vlan_ip_map | length > 1

- name: Assert minio instances online
  command: "cat {{ start_dss_minio_log_dir }}/nkv-minio_{{ ip_address }}.log"
  loop: "{{ tcp_ip_list }}"
  changed_when: false
  loop_control:
    loop_var: ip_address
  register: minio_logs
  until: minio_logs.stdout is search('0 Offline')
  retries: 12
  delay: 5
  become: true
