#  BSD LICENSE
#
#  Copyright (c) 2021 Samsung Electronics Co., Ltd.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in
#      the documentation and/or other materials provided with the
#      distribution.
#    * Neither the name of Samsung Electronics Co., Ltd. nor the names of
#      its contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Get matching_device
  set_fact:
    matching_device: "{% if phys_dev != '' %}{{ phys_dev }}{% else %}{{ vlan_dev }}{% endif %}"
  loop: "{{ up_adapters.stdout_lines }}"
  loop_control:
    loop_var: adapter
  vars:
    adapter_re: '^[\d]+: ([^@:]+)(@([^:]+))?:'
    vlan_dev: "{{ adapter | regex_search(adapter_re, '\\1') | first }}"
    phys_dev: "{{ adapter | regex_search(adapter_re, '\\3') | first }}"
    lookup_dev: "ansible_{{ vlan_dev | replace('-', '_') }}"
  when:
    - adapter is regex(adapter_re)
    - lookup('vars', lookup_dev).ipv4.address is defined
    - lookup('vars', lookup_dev).ipv4.address == tcp_ip

- name: Assert matching_device defined
  assert:
    that: matching_device is defined
    msg: Adapters with matching TCP IP addresses not found. Check `tcp_ip_list` var in inventory file.

- name: Get NUMA node
  command: "cat /sys/class/net/{{ matching_device }}/device/numa_node"
  changed_when: false
  register: device_numa_node

- name: Set num_tcp_ips var
  set_fact:
    num_tcp_ips: "{{ (num_tcp_ips | default(0) | int) + (count_map.tcp | length | int) }}"
  loop: "{{ combined_vlan_ip_map }}"
  loop_control:
    loop_var: count_map
  run_once: true

- name: Create distributed minio scripts
  template:
    src: minio_startup.sh.j2
    dest: "{{ start_dss_minio_host_bin_dir }}/minio_startup_{{ tcp_ip }}.sh"
    mode: 0751
  vars:
    numa_node: "{{ device_numa_node.stdout }}"
  when: num_tcp_ips | int > 1
  become: true

- name: Create non-distributed minio scripts
  template:
    src: single_minio_startup.sh.j2
    dest: "{{ start_dss_minio_host_bin_dir }}/minio_startup_{{ tcp_ip }}.sh"
    mode: 0751
  vars:
    numa_node: "{{ device_numa_node.stdout }}"
  when: num_tcp_ips | int == 1
  become: true
