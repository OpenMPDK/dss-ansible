# The Clear BSD License
#
# Copyright (c) 2022 Samsung Electronics Co., Ltd.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the disclaimer
# below) provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Samsung Electronics Co., Ltd. nor the names of its
#   contributors may be used to endorse or promote products derived from this
#   software without specific prior written permission.
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
# THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
---

- name: Stat XRT script
  ansible.builtin.stat:
    path: "{{ xrt_setenv }}"
  register: xrt_setenv_script

- name: Assert XRT script exists
  ansible.builtin.assert:
    that: xrt_setenv_script.stat.exists
  when: hpos

- name: Create format_disks.sh script
  ansible.builtin.template:
    src: format_disks.sh.j2
    dest: "{{ target_conf_dir }}/format_disks.sh"
    mode: 0751
  vars:
    format_bin: "{% if dss_formatter.stat.exists %}dss_formatter{% else %}mkfs_blobfs{% endif %}"
  register: create_format_disks_template
  become: true

- name: Check presence of existing format_disks.sh output
  ansible.builtin.stat:
    path: "{{ dss_log_dir }}/format_disks.out"
  register: format_disks_out_file

- name: Check previous format_disks.sh output
  ansible.builtin.include_tasks: check_blobfs_format.yml
  when:
    - format_disks_out_file.stat.exists
    - not dss_formatter.stat.exists

- name: Execute format_disks.sh script
  ansible.builtin.command: "{{ target_conf_dir }}//format_disks.sh"
  register: execute_format_disks
  when: >
    not format_disks_out_file.stat.exists or
    blobfs_format_error | d(false) or
    create_format_disks_template.changed or
    create_kvfs_conf.changed
  become: true

- name: Write format_disks.sh output
  ansible.builtin.copy:
    dest: "{{ dss_log_dir }}/format_disks.{{ item.suffix }}"
    content: "{{ execute_format_disks[item.type] }}"
    mode: 0644
  loop:
    - suffix: out
      type: stdout
    - suffix: err
      type: stderr
  loop_control:
    label: "{{ dss_log_dir }}/format_disks.{{ item.suffix }}"
  when:
    - dss_formatter.stat.exists
    - execute_format_disks is not skipped
    - execute_format_disks[item.type] != ''
  become: true

- name: Check previous format_disks.sh output
  ansible.builtin.include_tasks: check_blobfs_format.yml
  when:
    - execute_format_disks is not skipped
    - not dss_formatter.stat.exists

- name: Assert filesystem initialized successfully
  ansible.builtin.assert:
    that: not blobfs_format_error | d(false)
    fail_msg: |
      mkfs_blobfs format failed
      Check {{ dss_log_dir }}/format_disks.out for details.
  when:
    - execute_format_disks is not skipped
    - not dss_formatter.stat.exists
